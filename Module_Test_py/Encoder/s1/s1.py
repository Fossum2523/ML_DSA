from default_parameters import ML_DSA_44, ML_DSA_65, ML_DSA_87
import os
ML_DSA = ML_DSA_44

q_minus_bit_len = (ML_DSA["q"]-1).bit_length()
t1_coff_square = q_minus_bit_len - ML_DSA["d"]
t1_coff_max = (2**t1_coff_square) - 1

# 算法 29: Power2Round(r)
def Power2Round(r):
    r_plus = r % ML_DSA["q"]
    r0 = r_plus % (2**ML_DSA["d"])
    if r0 > (2 ** (ML_DSA["d"] - 1)):  # 確保 r0 在 -2^(d-1) 到 2^(d-1) 之間
        r0 -= 2 ** ML_DSA["d"]
    r1 = (r_plus - r0) // (2 ** ML_DSA["d"])
    
    return (r1, r0)

# 算法 4: IntegerToBits(x,α)
def IntegerToBits(x, alpha):
    y = [0] * alpha
    for i in range(alpha):
        y[i] = x % 2
        x = x // 2
    return y

# 算法 6: BitsToBytes(y) 
def BitsToBytes(y: list) -> bytearray:
    """
    將位元串 y 轉換為位元組串
    :param y: 位元串
    :return: 位元組串 z
    """
    c = len(y)
    z = bytearray((c + 7) // 8)  # 初始化位元組串
    for i in range(c):
        z[i // 8] += y[i] * (2 ** (i % 8))
    return z


# 算法 10: SimpleBitPack(w,b) 
def SimpleBitPack(w, b):
    z = []
    for i in range(256):
        z.extend(IntegerToBits(w[i], b.bit_length()))
    return BitsToBytes(z)

def Verilog_trans(a):
    # a = list(a)
    a = BytesToBits(a)
    a.reverse()
    a = ''.join(map(str, a))
    a = ''.join(hex(int(a[i:i+4], 2))[2:].upper() for i in range(0, len(a), 4))
    return a 

# 算法 7: BytesToBits(y)
def BytesToBits(z):
    z = bytearray(z)
    d = len(z)  # Length of the byte string
    y = [0] * (d * 8)  # Initialize the bit string to hold 8 bits for each byte
    for i in range(d):
        for j in range(8):
            y[8 * i + j] = z[i] % 2  # Get the least significant bit
            z[i] = z[i] // 2  # Shift the byte right
    return y

# 轉換為 3-bit 補數
def to_3bit_twos_complement(val):
    return val & 0b111 # 取低3-bit

### set s1 data and output s1 data to s1.txt file ###
s1 = [[-1, 1, 1, 2, 2, 1, 1, -1, 2, 1, 2, 0, 1, 0, 0, 1, -2, -1, 0, 0, 0, -2, -2, -2, -1, -1, 1, 1, 2, -2, 2, -1, 
-2, -2, 0, -2, 2, -2, 0, -2, -1, 2, -2, 1, -1, -2, -1, 0, 0, 0, 1, 0, 0, -2, 2, -2, 2, 1, 0, -1, -2, 1, 0, 1, 2, -2, 0, 2, 2, 1, 2, -2, 0, -1, -2, 0, 2, -1, 2, 2, 0, 0, 2, 0, -2, 1, 1, 0, 0, 0, -1, -1, -1, 2, -2, 1, 2, 2, 0, 0, 
-2, 0, 0, 0, 2, -2, -2, -1, 2, 2, -2, 2, -1, 1, 0, 2, 2, 2, 1, 1, -1, 1, 0, -2, 0, 2, 1, 0, -1, -1, -1, 0, 2, -1, 
2, -2, 1, 2, -1, 2, -2, -2, -1, 2, 0, -1, -1, -2, -1, -1, 0, 1, -2, 2, -1, -1, -2, 0, -1, 2, 2, -2, -2, -2, -2, 0, 1, -2, 0, 0, 1, -2, -1, 0, 2, -1, -2, -2, 1, 2, 1, 0, 0, 2, 2, 0, -2, 0, 2, -2, -2, -2, -1, 0, 0, -1, 0, 0, -2, 1, -2, 2, -1, -2, -1, -1, -2, 1, 2, 2, 0, 0, -1, 0, 2, 1, -2, 0, 2, -2, 1, 2, 0, -2, 2, 2, 1, 2, -1, 2, 0, 2, -1, 2, 1, -1, 1, -2, 1, -2, 2, 0, -2, 2, 0, 0, 0, -1, 1, 0, 2, 2, -2, 0, -1, 0], [2, -2, 1, 2, -2, 0, 2, 1, 1, -1, -2, 
-1, -2, -2, 2, -1, 0, 2, 1, 0, 1, 2, 2, 2, -2, -2, -2, 2, -2, -2, 0, -2, 1, 2, 0, -1, -2, 2, -1, 0, 0, 2, -2, -1, 
0, 0, 2, -1, 0, -1, -2, 1, 1, -2, -2, 0, 2, -2, 0, -1, 2, -2, 0, 0, 0, 1, -1, -1, -2, -2, 0, -2, 2, 0, 1, 1, 2, -1, 0, -1, -2, 0, 0, 0, -2, -2, -1, -1, 1, 2, -1, -1, 1, 1, -1, -1, -2, 1, 2, 0, -2, 2, 0, -2, -2, 0, 2, -2, -1, -2, 0, -1, 1, -1, -1, 2, 2, -1, -1, 1, 0, -2, 1, 0, 0, 2, -1, 1, -1, 2, 0, -2, -2, -2, 2, -1, -2, -1, -2, 1, -1, -2, 
-2, 0, -1, -2, -2, 0, -1, 0, -2, 2, 1, 0, -2, 0, 0, 1, 0, 0, -2, -2, -1, 2, -1, -2, -1, -2, -2, 0, 2, 0, -2, -1, -1, -1, -1, -1, 1, 1, -1, 0, -2, -2, 1, -1, -2, 1, -2, -1, 2, 1, -1, 0, 1, 2, 1, -2, 2, 1, -1, 0, 1, 2, -2, 0, 0, -1, 1, 1, -1, -1, -1, 2, -2, -1, -1, 2, 1, 2, -1, 1, -1, 0, 2, 1, -2, 2, 1, 1, -1, 0, -1, -2, -1, -1, 0, -1, 0, -2, 0, 2, 2, 0, 2, 2, 0, 2, 2, -1, 0, 2, 1, -2, 2, -1], [-1, -1, 1, 2, 2, 1, 0, -1, -1, -2, -1, 1, -1, -1, 1, 1, 0, 1, 2, 2, -1, -1, -1, 0, 2, 1, -1, 1, 1, -2, 1, -2, 1, 1, -2, -2, -1, -1, 0, -1, -1, 1, 1, -2, 2, -2, -1, 2, 2, 0, 1, 1, 0, 1, -2, -1, 0, 2, -2, 2, -2, 0, 2, 1, 1, 1, -2, 0, 0, 1, 2, 1, -1, -1, -1, -2, 1, 2, -2, -1, 2, 0, 2, -2, -1, 0, 2, 2, -2, -2, 2, 2, 0, -1, 1, 0, 1, -1, 1, -2, 1, 2, -1, -2, -2, 2, 0, 0, -1, -2, 1, -1, -1, 1, -2, 0, 0, -1, 0, 2, 0, 0, -2, -2, -1, -1, 0, 1, 1, 0, -2, -2, 0, 1, -1, -2, 1, 0, 2, 0, 0, 1, -1, -2, 2, -1, -2, 2, 1, 2, -1, 
-1, 2, -1, -2, 0, -1, 1, -2, -1, 1, 0, 1, 1, -2, -1, 2, -2, 2, -2, -1, -2, -2, -2, 1, 0, -1, -1, 0, -2, -2, 2, 1, 
2, 2, 2, 0, 0, 2, 0, 0, 2, -2, 0, 2, -2, -1, -2, 1, 0, 2, 0, -2, -1, 2, -1, -2, -1, -1, -1, -2, -2, 1, -1, -2, 0, 
1, 2, 1, -2, 1, 1, -2, 1, 2, 1, 1, 2, -1, -1, -2, -1, 0, 0, -1, -2, 2, 2, -1, -1, 2, -1, 1, 2, 2, -1, 1, 0, 2, -2, -2, -1, 0, -1, -2, -1], [0, 2, 1, 0, 1, -1, 0, -2, -2, -1, 0, 2, 0, -2, 2, -2, -2, -2, -2, -2, -1, 1, 1, 0, -2, -2, 2, 1, 0, -2, 2, 1, -2, -1, -1, -1, 2, 0, 1, -2, 1, 2, -2, 2, 2, -2, -1, -1, -1, -2, -1, 1, 2, 2, -2, 1, -1, -2, -1, -2, 1, -1, 1, 0, -2, 2, 1, 2, 0, 2, 2, -1, 0, 1, -1, 0, -1, 0, 0, 0, 1, 2, 2, 2, -2, 2, -1, 2, 0, 1, -2, 0, -2, 1, -1, 2, 0, 0, 2, -1, 2, -2, -2, 0, -1, 0, 1, -2, 2, -1, -1, -2, -2, -2, -1, -1, -2, 1, -2, 2, -1, 2, 1, -1, 2, 1, -2, -2, 0, -1, -1, -2, -1, 1, -1, 1, 2, 0, 1, 0, -1, 1, -1, -1, -1, 2, -2, -1, -2, 0, 2, -1, -2, 0, 0, -2, 2, 1, 2, 2, 0, 2, -2, -1, 1, 1, -1, -2, 0, -2, 1, -2, 2, 1, 1, 1, -1, 0, 0, 1, -1, 2, -2, -2, -1, -2, 1, 1, 2, 1, 2, -2, 0, 1, 2, -2, -2, -1, 2, 0, 1, 1, -2, -2, 2, 1, -1, -2, 2, -2, -2, -1, -2, 0, 1, 2, -2, 2, -2, 1, -1, 0, 0, 0, -1, -1, 2, 1, 2, 1, 2, -2, 2, 1, 1, 2, 1, 1, -2, 0, -1, -2, 1, 2, 2, 1, 0, 1, -1, 1, 1, -2, 2, 0, -1, 1]]        


if os.path.exists("s1.txt"):
        os.remove("s1.txt")

for i in range(4):
    for j in range(256):
        with open("s1.txt", "a") as file:  # "w" 代表寫入模式，會覆蓋原內容
            file.write(f"{hex(to_3bit_twos_complement(s1[i][j]))[2:]}")
            file.write(f"\n")

pack_s1 = bytearray([])
for i in range(4):
    pack_s = SimpleBitPack(s1[i],7)
    pack_s1 = pack_s1 + pack_s
pack_s1 = BytesToBits(pack_s1)
### set s1 data and output s1 data to s1.txt file ###



### output s1 goldendata to s1_testbench_golden.txt file ###
split_data = [pack_s1[i:i+64] for i in range(0, len(pack_s1), 64)]

if os.path.exists("s1_testbench_golden.txt"):
        os.remove("s1_testbench_golden.txt")

for block in split_data:
    with open("s1_testbench_golden.txt", "a") as file:  # "w" 代表寫入模式，會覆蓋原內容
            file.write(f"{int(''.join(map(str, block[::-1])), 2):016X}")
            file.write(f"\n")
### output s1 goldendata to s1_testbench_golden.txt file ###