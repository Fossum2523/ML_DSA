from default_parameters import ML_DSA_44, ML_DSA_65, ML_DSA_87
import os
import hashlib
import numpy as np

ML_DSA = ML_DSA_44

q_minus_bit_len = (ML_DSA["q"]-1).bit_length()
t1_coff_square = q_minus_bit_len - ML_DSA["d"]
t1_coff_max = 2**t1_coff_square - 1


# 算法 4: IntegerToBits(x,α)
def IntegerToBits(x, alpha):
    y = np.zeros(alpha, dtype=int)
    for i in range(alpha):
        y[i] = x % 2
        x = x // 2
    return y

# 算法 5:  BitsToInteger(y)
def BitsToInteger(y):
    y = np.array(y)  # 確保輸入是 NumPy 陣列
    x = 0
    alpha = len(y)
    for i in range(alpha):
        x = 2 * x + y[alpha - 1 - i]
    return x

# 算法 6: BitsToBytes(y) 
def BitsToBytes(y):
    y = np.array(y, dtype=int)  # 確保輸入是 NumPy 陣列且為整數類型
    c = len(y)
    z = np.zeros((c + 7) // 8, dtype=int)  # 初始化字節數列
    for i in range(c):
        z[i // 8] |= y[i] << (7 - (i % 8))  # 每 8 位元組合成一個字節
    return z

# 算法 7: BytesToBits(z)
def BytesToBits(z):
    z = np.array(z, dtype=np.uint8)
    y = np.unpackbits(z)  # 將字節數列直接轉換為位元數列
    return y


# 算法 8: CoefFromThreeBytes(b0,b1,b2)
def CoeffFromThreeBytes(b0, b1, b2):
    if b2 > 127:
        b2 = b2 - 128
    z = (b2 << 16) + (b1 << 8) + b0
    if z < ML_DSA["q"]:
        return z
    else:
        return None

# 算法 9: CoefFromHalfByte(b) 
def CoeffFromHalfByte(b):
    if ML_DSA["eta"] == 2:
        if b < 15:
            return 2 - (b % 5)
        else:
            return None
    elif ML_DSA["eta"] == 4:
        if b < 9:
            return 4 - b
        else:
            return None
    else:
        return None
    
# 算法 10: SimpleBitPack(w,b) 
def SimpleBitPack(w, b):
    z = []
    for i in range(256):
        z.extend(IntegerToBits(w[i], b.bit_length()))
    return BitsToBytes(z)

# 算法 11: BitPack(w,a,b) 
def BitPack(w, a, b):
    z = []
    for i in range(256):
        z.extend(IntegerToBits(b - w[i], (a + b).bit_length()))
    return BitsToBytes(z)

# 算法 12: SimpleBitUnpack(v,b)
def SimpleBitUnpack(v, b):
    c = b.bit_length()
    z = BytesToBits(v)
    w = [BitsToInteger(z[i*c:(i+1)*c]) for i in range(256)]
    return w

# 算法 13: BitUnpack(v,a,b) 
def BitUnpack(v, a, b):
    c = (a + b).bit_length()
    print("BBBB",v)
    z = BytesToBits(v)
    print("AAAA",z)
    
    w = [b - BitsToInteger(z[i*c:(i+1)*c]) for i in range(256)]
    print("w",w)
    return w

# 算法 14: HintBitpack(h) 
def HintBitPack(h):
    # 初始化一個足夠大的陣列來存儲結果
    y = np.zeros(ML_DSA["omega"] + ML_DSA["k"], dtype=int)
    
    # 處理每個多項式的非零係數
    index = 0
    for i in range(ML_DSA["k"]):
        # 尋找非零係數的索引
        non_zero_indices = np.nonzero(h[i])[0]
        y[index:index + len(non_zero_indices)] = non_zero_indices
        index += len(non_zero_indices)
        y[ML_DSA["omega"] + i] = index  # 存儲當前非零數量的累計

    return y

# 算法 15: HintBitUnpack(y) 
def HintBitUnpack(y):
    h = [[0] * 256 for _ in range(ML_DSA["k"])]
    index = 0
    for i in range(ML_DSA["k"]):
        if y[ML_DSA["omega"] + i] < index or y[ML_DSA["omega"] + i] > ML_DSA["omega"]:
            return None
        while index < y[ML_DSA["omega"] + i]:
            h[i][y[index]] = 1
            index += 1
    while index < ML_DSA["omega"]:
        if y[index] != 0 :
            return None
        index += 1 
    return h

# 算法 16 pkEncode(ρ,t1)  
def pk_encode(p, t_list):
    pk = BitsToBytes(p)
    # print(len(pk))
    for i in range(ML_DSA["k"]):
        packed_t = SimpleBitPack(t_list[i], t1_coff_max)
        # print(len(packed_t))
        pk = np.concatenate([pk, packed_t])
    return pk

# 算法 17 pkDecode(pk) 
def pk_decode(pk):
    rho = BytesToBits(pk[:32])
    t1 = np.empty((0, 256))
    print("pk",pk[32:])
    for i in range(ML_DSA["k"]):
        t1_i = SimpleBitUnpack(pk[(i * 320 + 32):(i * 320 + 32 + 320)],t1_coff_max)
        # print(pk[(i * 320 + 32):(i * 320 + 32 + 320)])
        # print(len(t1_i))
        t1_i = np.array(t1_i)
        t1 = np.vstack([t1,t1_i])
    return rho, t1

# 算法 18 sk_encode(ρ,K,tr,s1,s2,t0) 
def sk_encode(p, K, tr, s1, s2, t0):
    # 將 p, K, tr 轉換為字節串
    sk = np.concatenate([BitsToBytes(p), BitsToBytes(K), BitsToBytes(tr)])
    
    # print(len(sk))
    # 打印結果
    # 將 s1, s2, t0 中的每個元素使用 BitPack 轉換為字節串並附加到 sk
    for si in s1:
        packed_si = BitPack(si, ML_DSA["eta"], ML_DSA["eta"])
        sk = np.concatenate([sk, packed_si])
    # print(len(sk))
    for si in s2:
        packed_si = BitPack(si, ML_DSA["eta"], ML_DSA["eta"])
        sk = np.concatenate([sk, packed_si])
    # print(len(sk))
    for ti in t0:
        packed_ti = BitPack(ti, 2**(ML_DSA["d"] - 1)-1, 2**(ML_DSA["d"] - 1))
        sk = np.concatenate([sk, packed_ti])
        # print(len(sk))
    
    # print(len(sk))
    return sk

# 算法 19 sk_(sk)
def sk_decode(sk):
    # 假設的每個段的位數
    size_f = 256  # 假設 f 是 256 位的長度
    size_K = 256  # 假設 K 是 256 位的長度
    size_tr = 512  # 假設 tr 是 512 位的長度
    size_s = 96  # s1, s2 每個元素的位串長度，轉為字節
    size_t = 13 * 32  # t0 每個元素的位串長度，轉為字節

    # 解析 sk
    index = 0
    f = BytesToBits(sk[index:index + size_f // 8])
    index += size_f // 8
    K = BytesToBits(sk[index:index + size_K // 8])
    index += size_K // 8
    tr = BytesToBits(sk[index:index + size_tr // 8])
    index += size_tr // 8
    s1 = [BitUnpack(sk[index:index + size_s], ML_DSA["eta"], ML_DSA["eta"]) for i in range(ML_DSA["l"])]
    index += size_s * ML_DSA["l"]

    s2 = [BitUnpack(sk[index:index + size_s], ML_DSA["eta"], ML_DSA["eta"]) for i in range(ML_DSA["k"])]
    index += size_s * ML_DSA["k"]

    print("dwdwddw",index)
    t0 = [BitUnpack(sk[index:index + size_t], 2**(ML_DSA["d"] - 1) -1, 2**(ML_DSA["d"] - 1)) for i in range(ML_DSA["k"])]
    index += size_t * ML_DSA["k"]
    print(index)
    return f, K, tr, s1, s2, t0

#Help to compare list
def compare_arrays(arr1, arr2):
    # 比較兩個數組列表的函數，確保每個相對應的數組都相等
    if len(arr1) != len(arr2):
        return False
    for a1, a2 in zip(arr1, arr2):
        if not np.array_equal(a1, a2):
            return False
    return True

# 算法 20 sigEncode(c˜,z,h)
def sigEncode(c, z, h):
    # 將 c 轉換成字節串
    sigma = BitsToBytes(c)
    # 對 z 中的每個元素使用 BitPack 並附加到 sigma
    for zi in z:
        packed_zi = BitPack(zi, ML_DSA["gamma_1"] - 1, ML_DSA["gamma_1"])
        sigma = np.concatenate([sigma, packed_zi])

    # 對 h 使用 HintBitPack 並附加到 sigma
    packed_h = HintBitPack(h)
    sigma = np.concatenate([sigma, packed_h])
    
    return sigma

# 算法 21 sigDecode(σ)
def sigDecode(sigma):
    # 計算必要的尺寸
    size_c = 256 // 8  #c 是 128* 2 位的長度
    size_zi =  576  # 每個 zi 的位串長度，轉為字節
    # 解析 sigma
    index = 0
    c = BytesToBits(sigma[index:index + size_c])
    index += size_c
    z = [BitUnpack(sigma[index + i * size_zi:index + (i + 1) * size_zi], ML_DSA["gamma_1"] - 1, ML_DSA["gamma_1"]) for i in range(ML_DSA["l"])]
    # 假設 `h` 跟隨在最後
    h = HintBitUnpack(sigma[index:])
    return c, z, h

# 算法 22 w1Encode(w1) not yet test
def w1Encode(w1):
    # 初始化位串
    w1_encoded = np.array([], dtype=int)
    # 系數的範圍計算
    range_max = (ML_DSA["q"] - 1) // (2 * ML_DSA["gamma_2"]) - 1
    # 對每個多項式系數進行打包
    for coeff in w1:
        packed_coeff = SimpleBitPack(coeff, range_max)
        w1_encoded = np.concatenate([w1_encoded, BytesToBits(packed_coeff)])
    return w1_encoded

# shake256
# def shake256(input_data, length):
#     """ Generate hash using SHAKE256 """
#     shake = hashlib.shake_256()
#     shake.update(input_data)
#     return shake.digest(length)
def shake256(input_data, length):
    """ Generate hash using SHAKE256 and return as np.uint8 array """
    shake = hashlib.shake_256()
    shake.update(input_data)
    digest = shake.digest(length)
    return np.frombuffer(digest, dtype=np.uint8)

# shake128
def shake128(input_data, output_length):
    """Generate SHAKE128 hash."""
    shake = hashlib.shake_128()
    shake.update(input_data)
    return shake.digest(output_length)

# 算法 23 SampleInBall(ρ)
def sample_in_ball(p):
    c = np.zeros(256, dtype=int)
    k = 8
    H_p = shake256(p,256)
    for i in range(256 - ML_DSA["tau"],256):
        while H_p[k] > i :
            k = k + 1
        
        j = H_p[k]
        c[i] = c[j]
        c[j] = pow(-1,H_p[i + ML_DSA["tau"] - 256])
        k = k + 1
    return c

# 算法 24 RejNTTPoly(ρ) 
def RejNTTPoly(p):
    a = [None] * 256  # Initialize polynomial coefficients
    H_p = shake128(p, 1024)  # Get more bytes than needed
    j = 0
    c = 0
    while j < 256:
        a[j] = CoeffFromThreeBytes(H_p[c], H_p[c+1], H_p[c+2])
        c += 3
        if a[j] is not None:
            j += 1
    return a
    
# 算法 25 RejBoundedPoly(ρ)
def RejBoundedPoly(p):
    """Generate a polynomial with coefficients in [-n, n]."""
    a = [None] * 256  # Polynomial coefficients initialization
    hash_output = shake128(p, 1024)  # Get more bytes than needed
    j = 0  # Coefficient index
    c = 0  # Hash byte index

    while j < 256:
        if c + 2 >= len(hash_output):  # Re-generate hash if out of bytes
            hash_output = shake128(p, 1024)
            c = 0

        z = hash_output[c]
        z0 = CoeffFromHalfByte(z % 16)  # Lower nibble
        z1 = CoeffFromHalfByte(z // 16)  # Upper nibble

        if z0 is not None:
            a[j] = z0
            j += 1

        if z1 is not None and j < 256:
            a[j] = z1
            j += 1

        c += 1  # Move to next byte in hash output

    return a
    
# 算法 26 ExpandA(ρ)
def ExpandA(p):
    """Generate a k x l matrix A from a seed p."""
    A = np.zeros((ML_DSA["k"], ML_DSA["l"]), dtype=object)
    # print(A)
    for r in range(ML_DSA["k"]):
        for s in range(ML_DSA["l"]):
            seed = np.concatenate([p,IntegerToBits(s, 8),IntegerToBits(r, 8)])
            A[r, s] = RejNTTPoly(seed)
    return A

# 算法 27 ExpandS(ρ) 
def ExpandS(p):
    """Generate two vectors of polynomials based on a seed."""
    s1 = [None] * ML_DSA["l"]
    s2 = [None] * ML_DSA["k"]
    for r in range(ML_DSA["l"]):
        seed = np.concatenate([p,IntegerToBits(r, 16)])
        s1[r] = RejBoundedPoly(seed)
    for r in range(ML_DSA["k"]):
        seed = np.concatenate([p,IntegerToBits(r + ML_DSA["l"], 16)])
        s2[r] = RejBoundedPoly(seed)
    return s1, s2


# 算法 28 ExpandMask(ρ, µ) 
def ExpandMask(p, mu):
    c = 1 + (ML_DSA["gamma_1"] - 1).bit_length()
    s = [None] * ML_DSA["l"]
    for r in range(ML_DSA["l"]):
        n = IntegerToBits(mu + r, 16)
        H = shake256(np.concatenate([p,n]), 32*c*(r+1))
        v = H[32*r*c:32*c*(r+1)]
        s[r] = BitUnpack(v, ML_DSA["gamma_1"] - 1, ML_DSA["gamma_1"])
    
    return s

# bit reverse
def brv(k):
    """ 進行位反轉，用於計算 ζ 的冪次 """
    return int('{:08b}'.format(k)[::-1], 2)

# NTT
def NTT(w):
    """ 執行數論轉換 NTT """
    w_hat = np.array(w, dtype=np.int64)
    k = 0
    length = 128

    while length >= 1:
        start = 0
        while start < 256:
            k = k + 1
            zeta = pow(1753, brv(k), ML_DSA["q"])
            for j in range(start, start + length):
                t = (zeta * w_hat[j + length]) % ML_DSA["q"]
                w_hat[j + length] = (w_hat[j] - t) % ML_DSA["q"]
                w_hat[j] = (w_hat[j] + t) % ML_DSA["q"]
            start += 2 * length
        length //= 2

    return w_hat

# INV_NTT
def NTT_inv(w_hat):
    """ 執行逆數論轉換 NTT^-1 """
    w = np.array(w_hat, dtype=np.int64)
    length = 1
    k = 256

    while length < 256:
        start = 0
        while start < 256:
            k -= 1
            zeta = -pow(1753, brv(k), ML_DSA["q"])  # 使用 brv(k) 反轉位
            for j in range(start, start + length):
                t = w[j]
                w[j] = (t + w[j + length]) % ML_DSA["q"]
                w[j + length] = (t - w[j + length]) % ML_DSA["q"]
                w[j + length] = (w[j + length] * zeta) % ML_DSA["q"]
            start = start + 2 * length
        length *= 2

    f = 8347681
    for j in range(256):
        w[j] = (f * w[j]) % ML_DSA["q"] 
    # n_inv = pow(256, ML_DSA["q"]-2, ML_DSA["q"])  # Modular inverse of n
    # w = (w * n_inv) % ML_DSA["q"]
    return w

# 算法 29: Power2Round(r)
def Power2Round(r):
    r_plus = r % ML_DSA["q"]
    r0 = r_plus % (2**ML_DSA["d"])
    r1 = (r_plus - r0) // (2**ML_DSA["d"])
    return r1, r0

# 算法 30: Decompose(r)
def Decompose(r):
    alpha = 2 * ML_DSA["gamma_2"]
    r_plus = r % ML_DSA["q"]
    r0 = r_plus % alpha
    if r_plus - r0 == ML_DSA["q"] - 1:
        r1 = 0
        r0 = r0 - 1
    else:
        r1 = (r_plus - r0) // alpha 
    return r1, r0

# 算法 31: HighBits(r)
def HighBits(r):
    r1, r0 = Decompose(r)
    return r1

# 算法 32: LowBits(r)
def LowBits(r):
    r1, r0 = Decompose(r)
    return r0

# 算法 33: MakeHint(z, r)
def MakeHint(z, r):
    r1 = HighBits(r)
    v1 = HighBits(r + z)
    return r1 != v1

# 算法 34: UseHint(h, r)
def UseHint(h, r):
    m = (ML_DSA["q"] - 1) // (2 * ML_DSA["gamma_2"])
    r1, r0 = Decompose(r)
    if h == 1 and r0 > 0:
        r1 = (r1 + 1) % m
    elif h == 1 and r0 <= 0:
        r1 = (r1 - 1) % m
    return r1

# NTT_dot
def NTT_dot(A,s):
    A_NTT_s = []
    for i in range(ML_DSA["k"]): 
        for j in range(ML_DSA["l"]):
            sum = 0
            d = []
            for k in range(256):
                sum = A[i][j][k] * s[j][k] % ML_DSA["q"]
                d.append(sum)
        A_NTT_s.append(d)
    return A_NTT_s


# 算法 1 ML-DSA.KeyGen() 
def KeyGen():
    # 1. 選擇隨機種子 ξ
    xi = np.random.randint(0, 2, 256, dtype=np.uint8)
    # 2. 扩展種子 ρ、ρ' 和 K
    H_xi = shake256(xi,1024)
    # print(len(H_xi))
    p, p_prime, K = np.split(H_xi, [256, 768])
    # 3. 生成矩陣 Â = ExpandA(ρ)
    A_hat = ExpandA(p)
    A_hat = np.array(A_hat)
    # 4. 生成多項式向量 (s1, s2) = ExpandS(ρ')
    s1, s2 = ExpandS(p_prime)
    # 5. 計算 t = NTT^-1(A_hat ∘ NTT(s1)) + s2
    NTT_s1 = [NTT(s) for s in s1]
    NTT_s1 = np.array(NTT_s1)
    A_NTT_s1 = NTT_dot(A_hat,s1)
    NTT_inv_A_NTT_s1 = [NTT_inv(s) for s in A_NTT_s1]
    t = []
    for i in range(4):
        d = []
        for k in range(256):
            sum = NTT_inv_A_NTT_s1[i][k] + s2[i][k]
            d.append(sum)
        t.append(d)
    print(t)
    # 6. 压缩 t = Power2Round(t)
    t1 = []
    t0 = []
    for ti in range (4):
        ta1 = []
        ta0 = []
        for tp in range(256):
            t1_temp,t0_temp = Power2Round(t[ti][tp])
            ta1.append(t1_temp)
            ta0.append(t0_temp)
        t1.append(ta1)
        t0.append(ta0)
    # 7. 生成公鑰 pk
    pk = pk_encode(p, t1)
    # 8. 生成私鑰 sk
    tr = shake256(BytesToBits(pk),512)
    sk = sk_encode(p, K, tr, s1, s2, t0)
    # # 9. 返回公鑰 pk 和私鑰 sk
    return pk, sk


# # 算法 2 ML-DSA.Sign(sk,M)
# def Sign(sk,M):
#     p,K,tr,s1,s2,t0 = sk_decode(sk)
#     s1_hat = NTT(s1)
#     s2_hat = NTT(s2)
#     t0_hat = NTT(t0)
#     A_hat = ExpandA(p)
#     u = np.concatenate([tr, M])
#     u =shake256(u,512)
#     rnd = np.random.randint(0, 2, 256, dtype=np.uint8)     
#     p_prime = np.concatenate([K,rnd,u])                                                                                                                            
#     p_prime = shake256(p_prime,512)
#     ka = 0
#     z,h = None
#     while z == None & h == None:
#         y = ExpandMask(p_prime,ka)
#         w = NTT_dot(A_hat,NTT(y))
#         w = NTT_inv(w)
#         w1 = HighBits(w)
#         c_tilde = np.concatenate([u,w1Encode(w1)])
#         c_tilde = shake256(c_tilde)
#         c1_tlide,c2_tlide = c_tilde
#         c = sample_in_ball(c1_tlide)
#         c_hat = NTT(c)
#         cs1 = NTT_dot(c_hat,s1_hat)
#         cs1 = NTT_inv(cs1)
#         cs2 = NTT_dot(c_hat,s2_hat)
#         cs2 = NTT_inv(cs2)
#         z = y + cs1
#         r0 = LowBits(w - cs2)
#         # if max(abs(z)) >= (ML_DSA["gamma1"] - ML_DSA["beta"]) or max(abs(LowBits(r0))) >= (ML_DSA["gamma2"] - ML_DSA["beta"]):


#     return 0










# # 算法 4: IntegerToBits(x,α)            test---------------------------
# x = 28  # 進制為 1101
# alpha = 6
# result = IntegerToBits(x, alpha)
# print("二進制表示:", result)


# 算法 5:  BitsToInteger(y)             test---------------------------
# y = np.array([1, 0, 1, 1])  # 對應於整數 13
# y = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])
# result = BitsToInteger(y)
# print("整數表示:", result)


# # 算法 6: BitsToBytes(y)            test---------------------------
# y = [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1]  # 16 位，應該轉換成兩個字節
# result = BitsToBytes(y)
# print("字節表示:", result)


# 算法 7: BytesToBits(z)                test---------------------------
# z = np.array([13, 255], dtype=np.uint8)  # 選擇兩個範例字節
# result = BytesToBits(z)
# print("二進制表示:", result)


# # 算法 8: CoefFromThreeBytes(b0,b1,b2)  test---------------------------
# b0 = 1
# b1 = 2
# b2 = 130  # 超過 127，應該減去 128
# result = CoeffFromThreeBytes(b0, b1, b2)
# print("結果:", result)


# # 算法 9: CoefFromHalfByte(b)           test---------------------------
# b_test = 7
# result = CoeffFromHalfByte(b_test)
# print("結果:", result)


# # 算法 10: SimpleBitPack(w,b) && 算法 12: SimpleBitUnpack(v,b)   test---------------------------          test---------------------------
# w = [1, 2, 3, 4] * 64  # 假設列表 w 長度為 256
# b = 1023
# print(w)
# packed_bytes = SimpleBitPack(w, b)
# print("打包後的字節串長度:", len(packed_bytes))
# print("打包後的字節串（部分顯示）:", packed_bytes[:10])  # 顯示前 10 個字節
# w_unpacked = SimpleBitUnpack(packed_bytes,b)
# assert np.array_equal(w, w_unpacked), "Unpacked polynomial does not match the original!"
# print("Test passed: Simple Unpacked polynomial matches the original.")


# # 算法 11: BitPack(w,a,b) && 算法 13: BitUnpack(v,a,b)   test---------------------------
# a = 5
# b = 50
# w = np.random.randint(-a, b + 1, 256)  # 隨機生成一個包含256個元素的多項式 w，其中每個係數在 [-a, b] 範圍內
# print(w)
# byte_string = BitPack(w, a, b)
# print("Byte string:", byte_string)
# print("Length of byte string:", len(byte_string))
# w_unpacked = BitUnpack(byte_string, a, b)
# print("Unpacked polynomial:", w_unpacked)
# ##### 驗證原始多項式與解包後的多項式是否相同
# assert np.array_equal(w, w_unpacked), "Unpacked polynomial does not match the original!"
# print("Test passed: Unpacked polynomial matches the original.")


# 算法 14: HintBitPack(h) && # 算法 15: HintBitUnpack(y)   test---------------------------
# h = [[0]*256 for _ in range(ML_DSA["k"])]
# h[0][3] = 1
# h[0][10] = 1
# h[1][50] = 1
# h[2][200] = 1
# ### 封裝和解封裝
# packed = HintBitPack(h)
# print("Packed Data:", packed)
# unpacked = HintBitUnpack(packed)
# print("Unpacked Data Matches Original:", unpacked == h)


# 算法 16: pkEncode(ρ,t1)  && # 算法 17: pkDecode(pk)  test---------------------------
# p = np.random.randint(0, 2, 256)  # 隨機生成一個 256位的二進位串
# t_list =  np.random.randint(0, t1_coff_max, size = (ML_DSA["k"],256)) # 生成 k 個多項式
# # # # 編碼
# encoded_pk = pk_encode(p, t_list)
# # # 解碼
# decoded_p, decoded_t_list = pk_decode(encoded_pk)
# print("Decoded p Matches Original:", np.array_equal(p, decoded_p))
# print("Decoded t_list Matches Original:", all(np.array_equal(t, dt) for t, dt in zip(t_list, decoded_t_list)))
# p = [1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1]
# t_list = [[499, 396, 366, 227, 945, 959, 143, 146, 963, 81, 702, 629, 921, 587, 510, 885, 898, 534, 598, 982, 588, 490, 744, 917, 674, 991, 336, 727, 424, 37, 618, 508, 331, 984, 348, 187, 542, 787, 287, 35, 22, 671, 665, 174, 376, 647, 678, 910, 455, 837, 313, 306, 797, 383, 590, 390, 468, 369, 622, 932, 905, 116, 489, 3, 672, 999, 721, 890, 968, 301, 903, 296, 234, 271, 626, 515, 746, 606, 574, 417, 688, 1008, 779, 641, 233, 871, 122, 349, 96, 819, 71, 733, 31, 212, 350, 825, 611, 476, 749, 31, 53, 668, 370, 1, 794, 65, 21, 55, 110, 669, 627, 302, 617, 506, 815, 908, 89, 970, 833, 76, 724, 51, 852, 634, 272, 859, 211, 846, 854, 147, 314, 1000, 256, 383, 850, 915, 746, 748, 375, 467, 1009, 536, 474, 595, 678, 97, 913, 860, 1019, 769, 799, 1018, 173, 331, 85, 149, 280, 179, 392, 97, 636, 703, 253, 921, 220, 330, 252, 257, 78, 517, 736, 73, 887, 718, 989, 51, 474, 817, 421, 354, 400, 586, 916, 152, 752, 351, 718, 408, 66, 89, 868, 818, 570, 405, 716, 818, 352, 421, 328, 660, 17, 844, 372, 877, 640, 466, 607, 831, 120, 689, 980, 795, 247, 54, 755, 778, 433, 954, 280, 216, 305, 875, 292, 784, 257, 640, 636, 574, 294, 474, 691, 368, 366, 126, 342, 452, 91, 134, 351, 828, 122, 922, 862, 97, 174, 228, 514, 992, 986, 217, 330, 929, 814, 737, 262, 97],
# [418, 470, 970, 893, 402, 516, 496, 401, 7, 306, 703, 709, 92, 911, 653, 321, 348, 75, 64, 856, 862, 617, 913, 204, 889, 0, 782, 232, 931, 178, 212, 77, 596, 811, 835, 678, 728, 758, 640, 222, 908, 395, 811, 52, 741, 984, 781, 695, 1006, 89, 24, 338, 277, 696, 139, 1001, 241, 750, 205, 415, 955, 707, 568, 91, 832, 168, 57, 617, 1002, 238, 954, 769, 713, 864, 49, 389, 228, 52, 404, 870, 103, 707, 845, 713, 930, 943, 791, 996, 736, 871, 832, 308, 107, 771, 507, 727, 422, 448, 159, 650, 380, 349, 713, 125, 334, 205, 141, 923, 688, 474, 22, 857, 580, 396, 730, 752, 741, 97, 512, 960, 108, 245, 528, 865, 930, 381, 487, 553, 317, 304, 138, 704, 84, 662, 690, 829, 981, 136, 499, 619, 605, 50, 644, 843, 432, 72, 15, 946, 601, 677, 970, 941, 418, 166, 97, 978, 903, 603, 878, 236, 261, 560, 410, 558, 457, 799, 721, 552, 15, 798, 42, 507, 306, 617, 956, 671, 724, 705, 125, 511, 483, 929, 101, 885, 585, 557, 239, 823, 367, 282, 767, 534, 491, 7, 276, 579, 95, 67, 403, 920, 236, 628, 670, 633, 688, 706, 373, 843, 728, 874, 686, 66, 733, 264, 920, 359, 856, 18, 455, 336, 702, 976, 661, 815, 1012, 744, 939, 854, 719, 796, 582, 937, 202, 894, 580, 27, 852, 95, 358, 152, 428, 789, 397, 944, 779, 845, 42, 342, 425, 462, 112, 293, 391, 63, 753, 89],
# [157, 77, 246, 863, 382, 781, 805, 536, 108, 99, 74, 534, 501, 141, 655, 985, 278, 516, 644, 224, 738, 406, 824, 666, 267, 674, 162, 664, 205, 438, 858, 296, 278, 921, 944, 913, 622, 250, 188, 394, 858, 563, 163, 106, 106, 628, 339, 301, 794, 257, 211, 231, 205, 42, 849, 821, 640, 251, 806, 313, 891, 132, 930, 290, 800, 755, 440, 790, 461, 811, 657, 149, 138, 520, 139, 842, 998, 437, 780, 718, 452, 846, 529, 15, 917, 279, 717, 290, 688, 59, 187, 1006, 84, 15, 510, 544, 800, 134, 997, 737, 220, 277, 540, 457, 194, 270, 83, 69, 412, 674, 278, 444, 134, 532, 468, 497, 453, 646, 755, 320, 96, 248, 653, 705, 705, 186, 350, 863, 579, 288, 823, 800, 883, 643, 529, 737, 449, 625, 1008, 180, 262, 565, 600, 714, 264, 461, 145, 360, 996, 250, 918, 304, 1011, 525, 482, 968, 450, 696, 468, 730, 805, 364, 909, 852, 250, 425, 667, 963, 475, 1016, 323, 508, 704, 969, 432, 669, 647, 453, 113, 388, 320, 611, 885, 606, 404, 104, 921, 442, 614, 144, 384, 769, 296, 78, 786, 400, 492, 227, 851, 340, 435, 1010, 929, 786, 1011, 463, 667, 472, 699, 706, 743, 546, 740, 894, 453, 168, 41, 1023, 309, 574, 659, 338, 31, 496, 946, 146, 627, 528, 257, 504, 615, 850, 371, 739, 928, 70, 377, 443, 174, 187, 316, 164, 716, 549, 219, 239, 41, 1017, 340, 783, 236, 132, 958, 241, 825, 198],
# [335, 840, 221, 741, 943, 156, 969, 225, 937, 180, 288, 697, 783, 520, 255, 738, 958, 592, 923, 83, 807, 741, 144, 553, 864, 236, 361, 328, 51, 210, 6, 1017, 680, 822, 1004, 1009, 535, 930, 481, 175, 284, 165, 76, 677, 354, 765, 780, 627, 522, 253, 941, 574, 8, 287, 57, 734, 859, 729, 405, 582, 573, 36, 575, 760, 983, 860, 988, 376, 165, 412, 19, 835, 735, 254, 115, 557, 560, 1005, 442, 620, 14, 888, 627, 296, 847, 666, 51, 326, 320, 663, 698, 287, 321, 520, 1, 302, 327, 413, 614, 920, 271, 150, 1012, 261, 290, 247, 712, 985, 459, 2, 644, 53, 228, 405, 739, 423, 395, 941, 648, 77, 181, 992, 475, 97, 617, 252, 267, 579, 268, 554, 629, 488, 992, 760, 515, 381, 356, 842, 833, 914, 1012, 946, 151, 336, 626, 146, 550, 692, 260, 499, 851, 266, 675, 505, 854, 182, 85, 964, 26, 359, 80, 573, 308, 640, 567, 937, 159, 299, 236, 241, 812, 487, 18, 948, 333, 345, 678, 19, 677, 69, 896, 774, 548, 146, 869, 802, 29, 641, 166, 89, 843, 993, 159, 453, 913, 579, 512, 680, 544, 253, 603, 833, 244, 982, 396, 472, 759, 292, 954, 18, 656, 451, 351, 888, 721, 217, 68, 354, 111, 195, 325, 306, 897, 151, 879, 980, 275, 160, 623, 874, 763, 504, 558, 453, 447, 143, 843, 23, 984, 773, 78, 926, 530, 262, 3, 843, 304, 738, 37, 292, 860, 245, 471, 521, 501, 831]]
# encoded_pk = pk_encode(p, t_list)
# print("Encoded Public Key:", encoded_pk)
# print(len(encoded_pk))
# pk = [ 91,0,60,191,175,62,81,102,168,95,138,69,185,193,164,83,63,242,22,251,34,108,254,184,58,129,162,14,230,233,126,84,15,226,227,198,228,66,98,168,195,68,51,1,38,232,129,85,19,113,56,62,163,78,162,173,237,173,17,133,144,139,52,144,91,9,252,30,19,4,189,150,34,95,54,5,108,27,32,153,198,36,231,112,34,125,30,124,195,16,236,29,36,168,240,52,253,145,205,1,255,222,96,143,175,174,21,124,101,137,219,213,246,61,200,245,126,133,120,68,170,164,78,11,100,78,95,107,214,132,35,157,20,95,61,69,168,69,75,228,187,88,138,239,66,69,219,58,11,185,73,50,41,135,185,196,10,125,189,55,164,82,99,99,253,229,236,55,120,193,247,46,133,35,1,135,169,231,179,80,40,195,238,92,248,174,190,135,72,196,93,80,232,226,42,129,231,4,148,193,28,39,99,117,168,173,35,4,17,219,38,200,16,15,7,196,113,214,144,149,87,95,9,161,238,188,236,76,156,14,5,11,132,223,13,79,149,229,88,185,33,221,252,143,38,178,6,118,128,153,142,156,153,72,142,252,18,141,91,249,39,171,163,97,251,94,156,231,206,50,192,82,78,232,143,186,15,59,229,161,167,197,90,230,197,24,173,76,122,51,192,94,41,86,207,200,223,110,178,168,31,209,237,218,64,246,122,236,253,113,94,78,61,192,66,170,147,154,221,61,39,90,231,44,167,235,133,240,240,179,136,132,208,215,222,129,207,200,72,116,17,248,168,66,71,184,43,43,194,143,118,187,162,216,11,183,0,150,151,167,254,114,157,193,35,209,30,105,94,96,192,36,253,49,213,249,79,92,60,166,183,106,19,183,83,127,230,64,45,223,134,234,109,141,119,113,141,3,179,37,5,68,74,191,75,231,108,1,253,67,204,134,205,213,115,110,70,157,175,59,154,35,157,230,127,212,196,217,147,25,176,186,105,12,66,77,162,243,230,136,49,229,205,186,119,180,159,32,209,56,163,202,237,78,174,200,150,143,51,22,156,58,42,122,40,179,155,135,90,108,24,245,163,167,244,158,106,173,70,212,117,201,159,169,128,188,163,34,252,105,99,59,87,107,48,225,233,143,119,20,18,161,38,127,12,130,101,53,98,247,85,191,57,219,147,9,2,53,135,5,152,228,5,190,15,138,88,240,51,241,155,189,241,38,99,159,184,93,96,48,204,191,70,102,56,73,67,231,244,223,105,234,118,121,130,216,33,71,216,245,41,85,235,179,211,168,217,6,100,174,155,150,16,206,138,143,102,69,75,44,81,139,228,40,83,186,147,196,52,200,217,224,114,114,107,188,142,172,226,162,24,246,218,38,57,115,117,65,254,178,1,110,52,120,227,68,52,66,56,26,74,241,128,4,196,145,152,210,168,113,84,220,109,137,117,187,226,12,34,219,220,27,149,222,183,235,116,230,30,90,255,153,152,51,183,70,34,31,161,59,196,66,249,242,92,96,53,134,27,122,94,117,97,92,166,116,151,22,232,206,245,108,175,234,240,76,207,107,130,79,190,41,92,85,194,215,150,170,167,153,44,73,196,144,61,54,42,181,10,250,188,74,234,246,100,65,6,237,47,116,156,174,140,151,13,77,73,183,154,152,171,246,204,57,51,86,62,73,156,7,181,43,128,249,99,222,154,92,84,253,193,236,72,152,183,113,54,48,208,198,244,203,200,77,194,69,239,207,130,31,227,130,224,250,133,90,211,46,59,112,211,135,114,52,28,12,48,0,210,89,95,116,158,38,197,234,105,42,11,212,34,81,165,169,197,101,59,153,94,182,184,58,47,184,99,92,14,192,226,159,151,96,164,104,69,145,208,206,247,29,70,245,41,32,75,197,96,135,237,173,45,55,147,144,64,248,52,97,11,155,211,182,22,200,126,67,180,158,139,56,210,27,158,139,147,107,77,205,144,215,60,18,243,246,246,106,17,23,56,177,106,46,174,239,141,246,108,97,231,141,41,170,162,209,55,141,160,3,158,205,86,206,114,49,165,236,231,236,42,202,196,105,164,43,158,50,58,196,32,216,106,16,13,207,183,139,23,22,160,54,93,167,36,238,14,220,156,78,17,21,227,190,113,244,255,7,148,161,10,183,102,212,158,17,236,29,181,86,129,102,39,221,84,191,204,34,203,175,180,242,162,86,129,146,99,139,151,137,227,2,10,40,2,164,185,15,157,218,163,111,101,5,70,212,22,0,178,243,58,134,177,177,14,128,46,249,183,196,221,25,117,151,10,147,11,12,179,131,227,145,103,40,206,30,44,105,141,177,154,160,39,207,182,32,216,136,64,197,29,241,118,87,190,253,50,64,81,13,149,160,182,196,128,253,193,161,52,110,0,193,149,207,250,107,167,130,38,37,249,164,124,160,41,194,152,88,240,122,192,168,111,74,29,7,146,99,95,130,193,93,93,251,25,204,196,21,162,185,85,106,214,123,24,6,232,175,104,24,39,177,196,101,216,100,107,72,26,0,183,171,104,199,202,252,98,54,86,210,253,217,67,30,174,1,113,185,104,133,20,1,150,235,127,30,215,107,231,42,176,1,205,231,203,219,34,13,165,238,207,232,211,65,234,203,225,40,120,1,28,248,86,129,174,143,75,240,169,232,196,0,135,255,81,105,34,7,197,126,11,211,193,244,94,144,242,43,93,19,144,8,204,205,241,7,149,239,8,88,197,220,63,111,217,247,136,88,223,202,93,129,81,10,150,130,235,69,208,224,148,222,237,4,84,16,27,11,40,234,210,191,183,207,18,48,153,78,3,188,152,206,152,111,76,231,114,5,119,218,156,132,6,186,239,203,63,42,139,158,172,45,26,92,89,138,7,110,82,188,175,41,81,207,29,67,57,117,127,92,108,82,44,59,196,185,60,113,228,123,99,154,111,184,255,173,177,23,193,145,180,185,208,217 ]
# # decoded_p, decoded_t_list = pk_decode([ 91,0,60,191,175,62,81,102,168,95,138,69,185,193,164,83,63,242,22,251,34,108,254,184,58,129,162,14,230,233,126,84,15,226,227,198,228,66,98,168,195,68,51,1,38,232,129,85,19,113,56,62,163,78,162,173,237,173,17,133,144,139,52,144,91,9,252,30,19,4,189,150,34,95,54,5,108,27,32,153,198,36,231,112,34,125,30,124,195,16,236,29,36,168,240,52,253,145,205,1,255,222,96,143,175,174,21,124,101,137,219,213,246,61,200,245,126,133,120,68,170,164,78,11,100,78,95,107,214,132,35,157,20,95,61,69,168,69,75,228,187,88,138,239,66,69,219,58,11,185,73,50,41,135,185,196,10,125,189,55,164,82,99,99,253,229,236,55,120,193,247,46,133,35,1,135,169,231,179,80,40,195,238,92,248,174,190,135,72,196,93,80,232,226,42,129,231,4,148,193,28,39,99,117,168,173,35,4,17,219,38,200,16,15,7,196,113,214,144,149,87,95,9,161,238,188,236,76,156,14,5,11,132,223,13,79,149,229,88,185,33,221,252,143,38,178,6,118,128,153,142,156,153,72,142,252,18,141,91,249,39,171,163,97,251,94,156,231,206,50,192,82,78,232,143,186,15,59,229,161,167,197,90,230,197,24,173,76,122,51,192,94,41,86,207,200,223,110,178,168,31,209,237,218,64,246,122,236,253,113,94,78,61,192,66,170,147,154,221,61,39,90,231,44,167,235,133,240,240,179,136,132,208,215,222,129,207,200,72,116,17,248,168,66,71,184,43,43,194,143,118,187,162,216,11,183,0,150,151,167,254,114,157,193,35,209,30,105,94,96,192,36,253,49,213,249,79,92,60,166,183,106,19,183,83,127,230,64,45,223,134,234,109,141,119,113,141,3,179,37,5,68,74,191,75,231,108,1,253,67,204,134,205,213,115,110,70,157,175,59,154,35,157,230,127,212,196,217,147,25,176,186,105,12,66,77,162,243,230,136,49,229,205,186,119,180,159,32,209,56,163,202,237,78,174,200,150,143,51,22,156,58,42,122,40,179,155,135,90,108,24,245,163,167,244,158,106,173,70,212,117,201,159,169,128,188,163,34,252,105,99,59,87,107,48,225,233,143,119,20,18,161,38,127,12,130,101,53,98,247,85,191,57,219,147,9,2,53,135,5,152,228,5,190,15,138,88,240,51,241,155,189,241,38,99,159,184,93,96,48,204,191,70,102,56,73,67,231,244,223,105,234,118,121,130,216,33,71,216,245,41,85,235,179,211,168,217,6,100,174,155,150,16,206,138,143,102,69,75,44,81,139,228,40,83,186,147,196,52,200,217,224,114,114,107,188,142,172,226,162,24,246,218,38,57,115,117,65,254,178,1,110,52,120,227,68,52,66,56,26,74,241,128,4,196,145,152,210,168,113,84,220,109,137,117,187,226,12,34,219,220,27,149,222,183,235,116,230,30,90,255,153,152,51,183,70,34,31,161,59,196,66,249,242,92,96,53,134,27,122,94,117,97,92,166,116,151,22,232,206,245,108,175,234,240,76,207,107,130,79,190,41,92,85,194,215,150,170,167,153,44,73,196,144,61,54,42,181,10,250,188,74,234,246,100,65,6,237,47,116,156,174,140,151,13,77,73,183,154,152,171,246,204,57,51,86,62,73,156,7,181,43,128,249,99,222,154,92,84,253,193,236,72,152,183,113,54,48,208,198,244,203,200,77,194,69,239,207,130,31,227,130,224,250,133,90,211,46,59,112,211,135,114,52,28,12,48,0,210,89,95,116,158,38,197,234,105,42,11,212,34,81,165,169,197,101,59,153,94,182,184,58,47,184,99,92,14,192,226,159,151,96,164,104,69,145,208,206,247,29,70,245,41,32,75,197,96,135,237,173,45,55,147,144,64,248,52,97,11,155,211,182,22,200,126,67,180,158,139,56,210,27,158,139,147,107,77,205,144,215,60,18,243,246,246,106,17,23,56,177,106,46,174,239,141,246,108,97,231,141,41,170,162,209,55,141,160,3,158,205,86,206,114,49,165,236,231,236,42,202,196,105,164,43,158,50,58,196,32,216,106,16,13,207,183,139,23,22,160,54,93,167,36,238,14,220,156,78,17,21,227,190,113,244,255,7,148,161,10,183,102,212,158,17,236,29,181,86,129,102,39,221,84,191,204,34,203,175,180,242,162,86,129,146,99,139,151,137,227,2,10,40,2,164,185,15,157,218,163,111,101,5,70,212,22,0,178,243,58,134,177,177,14,128,46,249,183,196,221,25,117,151,10,147,11,12,179,131,227,145,103,40,206,30,44,105,141,177,154,160,39,207,182,32,216,136,64,197,29,241,118,87,190,253,50,64,81,13,149,160,182,196,128,253,193,161,52,110,0,193,149,207,250,107,167,130,38,37,249,164,124,160,41,194,152,88,240,122,192,168,111,74,29,7,146,99,95,130,193,93,93,251,25,204,196,21,162,185,85,106,214,123,24,6,232,175,104,24,39,177,196,101,216,100,107,72,26,0,183,171,104,199,202,252,98,54,86,210,253,217,67,30,174,1,113,185,104,133,20,1,150,235,127,30,215,107,231,42,176,1,205,231,203,219,34,13,165,238,207,232,211,65,234,203,225,40,120,1,28,248,86,129,174,143,75,240,169,232,196,0,135,255,81,105,34,7,197,126,11,211,193,244,94,144,242,43,93,19,144,8,204,205,241,7,149,239,8,88,197,220,63,111,217,247,136,88,223,202,93,129,81,10,150,130,235,69,208,224,148,222,237,4,84,16,27,11,40,234,210,191,183,207,18,48,153,78,3,188,152,206,152,111,76,231,114,5,119,218,156,132,6,186,239,203,63,42,139,158,172,45,26,92,89,138,7,110,82,188,175,41,81,207,29,67,57,117,127,92,108,82,44,59,196,185,60,113,228,123,99,154,111,184,255,173,177,23,193,145,180,185,208,217 ])
# # print("decoded_t_p",decoded_p)
# # print("decoded_t_list",decoded_t_list)


# 算法 18 skEncode(ρ,K,tr,s1,s2,t0)   test---------------------------
# p = [1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1]
# K_1 = [1,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,1,1,1,1,0]
# tr = [0,1,1,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0]
# s1 = [[-2, -1, 1, 2, -2, -1, 2, 2, -1, 1, 1, 0, -2, 2, 0, 2, -2, 0, 2, 2, -1, 2, -1, 2, 0, -2, -2, 0, 0, -2, 2, -2, 2, -2, 1, 1, -2, 0, -2, -1, 0, 1, 0, 2, -2, -2, 2, -1, -2, 1, -2, 0, 0, 0, 2, 0, -1, 1, 0, -2, -1, 0, -2, 2, -1, -2, 1, 2, 2, 2, 1, -1, 0, 2, 2, 0, 2, -1, -1, -2, 2, 2, -1, 2, -2, -1, -2, -1, -1, -2, -2, 1, -2, 2, -1, 0, -2, 1, 2, 2, 2, -1, 1, 2, -1, -2, -2, 1, 0, 2, -2, 2, -1, -1, -2, 0, 0, 1, -1, 0, 2, -2, -1, 2, 2, -1, -2, 0, -1, 1, -1, -2, 1, 2, 1, 0, 2, 2, -2, -2, 2, 2, -2, 2, 2, 1, 2, 0, 1, -1, 0, 1, 2, 0, -2, -1, -2, 2, 0, 1, 0, 0, 2, 2, 1, -1, 0, 1, -2, -2, -2, 0, 1, -1, 1, -1, 0, -2, -2, -2, 0, -2, -2, -1, 2, -2, -2, -1, 1, 0, 2, 1, -2, 1, 2, 0, 0, -2, 1, 1, 1, -1, 0, 0, 2, -2, 1, -1, 1, -2, 1, 1, 2, 0, 2, 1, 2, 2, 2, 2, 0, 2, 0, -2, 0, -1, -1, 1, 1, 1, -1, -1, -2, 1, 1, -1, 0, 2, 1, -1, -2, -2, -1, -2, -1, -2, 2, 1, -2, -2, 0, 0, 1, -2, 1, -2],
# [1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 2, 0, -1, -1, 0, 0, -1, 1, 1, 0, 2, -1, -1, 0, 0, 0, 2, 1, -2, 2, -2, -1, 1, -2, -1, 1, -1, 2, 2, -2, -2, -2, 2, 1, 1, 1, -2, 1, 1, 1, 2, 1, 0, 2, 0, -2, -2, 0, 1, -2, 0, -1, 0, 0, 1, 2, -1, -2, -2, -2, 2, 0, 2, 1, 0, -1, 0, 0, 0, 2, -2, 0, 0, -1, 1, -2, 1, -2, 2, 2, -1, 2, 1, 0, 0, 0, 2, 0, 2, -2, -1, -1, 2, 0, 1, 2, 2, 1, 0, 0, 1, 1, -2, 2, -2, -1, 1, -1, 0, 1, 1, 0, 2, 1, -1, 1, -1, -2, 0, -2, -1, 2, 0, 2, -1, 1, -1, 2, 0, 0, 1, -2, -1, -2, -1, 1, -2, -1, 0, 1, 2, 1, 2, -1, 1, 1, -2, -1, 0, 2, 1, -1, -1, 0, 2, 1, -1, -2, -1, 1, -1, 1, 1, 0, -2, -2, -2, -2, 2, 0, -2, 1, 1, 0, 0, 0, -1, 1, -1, -2, 2, 2, -2, -2, 1, 2, 2, 0, -1, 1, -1, 1, -1, 0, -1, 1, 0, 2, -2, 0, -1, -1, -2, -1, 2, 2, 1, -2, 2, -1, -2, -2, 0, 0, -2, 0, -1, 2, -1, 2, -2, 2, 1, -1, 2, 0, 2, -2, 2, 0, -1, 1, 2, 0, -2, 0, -1, 0, -2, 0, 2, -1, -1, 1, 0, -2],
# [0, -1, -2, 0, 2, -1, 1, -1, -2, -1, 1, -2, 2, 2, 0, 2, -1, -1, 1, -2, 0, 0, 2, 0, 0, 0, 2, -2, 2, 2, -1, 2, 2, 0, 2, 0, -1, 1, 0, -2, -1, -2, 1, 1, 0, -1, -1, -1, 0, 2, 0, -2, -1, 0, -1, 0, 1, -1, -1, 0, 2, -2, 2, 1, 1, -2, -2, 2, -2, 0, -1, 1, -2, -2, 0, 1, 0, 1, -2, -2, -2, 2, 0, -1, -2, -1, -1, 1, 0, 1, 2, 1, 0, -2, -1, -2, 0, 2, 1, 2, -2, 1, 2, 2, 0, 0, -2, 0, -1, 2, 1, 1, -1, -1, -1, 0, -2, 2, 1, -2, -1, -2, -2, 2, -2, 1, 0, 2, 1, -1, -2, -1, 1, 1, 2, 0, 0, -1, 2, 1, -2, 1, -2, 0, 2, 0, 0, 0, -1, -1, 1, -1, 1, 0, -1, 1, 1, -1, 2, 0, 2, 2, 1, 2, -1, -2, -2, 2, 2, -1, -1, 1, 1, 1, 0, 1, -2, 0, 2, 1, -1, 2, 1, -2, 1, -1, 0, -2, 1, -2, -1, -2, 0, 1, 0, 1, 1, -1, 1, -2, 0, -1, -2, 0, 1, 2, -2, -2, -1, -2, 1, 1, -2, -2, -2, -2, 2, -2, -1, -2, 0, -2, 0, 1, -1, 2, 1, 2, 0, 2, -1, -2, 2, -2, -2, -2, -2, 2, 0, -2, 2, 0, -2, 1, 2, 1, 1, -2, 0, -1, 2, 0, 1, 0, -1, 0],
# [0, -2, 2, 2, 2, -2, 2, 0, 1, 1, -2, -2, 2, 2, -1, -1, -2, 1, 1, -2, -2, 0, -2, -1, 1, -2, 1, -1, 2, -1, 2, -1, 0, -2, -2, 2, 0, 2, 1, 2, 1, -2, 0, 2, -2, -1, -1, 1, 0, 2, 1, -2, -2, 0, 1, 0, -2, -2, 1, -2, -2, 2, 1, -2, 2, -2, 2, 1, 2, -1, -1, -1, 2, 2, 0, 2, 0, 2, 1, -1, -2, 2, -2, -2, -1, 2, 2, 2, 0, -2, -1, 2, -1, 2, -1, -1, -1, 0, -2, -2, 2, 1, 0, 0, 2, -2, -1, 2, 2, -1, 0, 1, 2, 2, 0, -1, 1, -2, -1, 2, 2, 1, 2, 2, -1, -2, 2, 0, 0, 1, 2, 2, 1, 2, 1, 0, 0, 2, 2, -2, -2, 2, 0, -2, -1, -2, 0, 1, 1, 2, 1, 1, -1, 0, 0, 1, 0, -1, -1, -2, 2, 1, -1, 1, -2, 0, -1, 2, -2, 2, -2, 1, -2, 0, 1, -2, 1, 2, 2, 2, 0, -2, -2, -1, 0, 0, 0, -2, -1, 2, -2, 2, -2, 0, -2, 2, -1, 1, 2, -1, 1, 1, 0, -1, 2, 2, -1, 2, 2, -2, 1, 1, -1, 2, -2, 1, -2, 1, -1, 1, 0, -2, 0, 1, 2, -2, 0, 2, -2, -1, 1, -1, 2, 2, -2, -1, -2, -2, 2, 0, -2, 1, 2, 2, 2, 1, 2, 0, 2, 0, -2, 1, -1, 0, -2, 1]]
# s2 = [[1, 1, -1, 0, 1, -1, 2, -2, 1, 0, 0, 1, -2, -1, 2, -1, 2, 1, 1, 0, 2, 1, -1, -1, 0, 2, -2, 0, 2, 2, 2, -2, -2, -2, -1, -2, 2, -1, -1, -1, 2, 2, 0, -1, -1, 2, 2, 1, -2, 1, 0, 2, -1, -1, 0, -1, 1, -1, -1, 2, 1, 2, -1, 0, 2, 0, 2, -1, 2, -2, 2, -1, 2, -1, 1, 0, 0, -2, 0, 1, 2, 1, 1, 0, -1, 2, 1, 0, -2, 2, 1, 2, -1, 2, 2, 0, -1, 2, 2, -1, 1, -2, -2, 2, 0, -1, 1, 2, 1, 1, 1, -1, -1, -1, 0, -1, -2, 0, -2, -2, 2, 2, 1, 2, 2, 1, 2, -1, 2, -2, 0, -1, 2, 2, -2, -2, -2, 1, -1, 0, 2, 2, 0, 2, 0, -1, 0, -1, 2, -1, 1, 1, -1, -2, 1, -1, -1, 2, 0, -2, -2, 1, 0, 1, -2, -2, 1, -1, 0, 2, -2, -2, 2, -1, 1, -1, 0, 0, -1, 0, -1, 2, 2, -1, 2, -2, 1, -2, -1, 1, 2, 2, 0, 2, 2, 0, -1, -2, -2, 2, 2, -2, -2, -2, 2, 0, -1, 2, -2, 1, 2, 2, 1, -2, 2, 2, 1, -1, 2, -1, -1, 0, -2, 1, 0, 0, 1, 1, 0, 1, 2, 0, -1, 0, 0, -2, -2, -2, -1, -2, 0, 0, -1, -1, -1, -1, 2, 2, 0, -2, -1, -2, -2, 1, 2, 1],
# [2, 0, 1, 1, 2, -1, 0, 0, -1, 1, -1, 0, -2, 0, -1, 2, 2, 1, 0, -2, 2, -1, -1, 1, 2, -2, 1, -2, 1, 0, 0, 2, -2, -2, 0, -2, 1, -1, 0, -1, 0, -2, 1, 0, -1, -1, 2, -1, -2, 0, -1, 2, -2, 1, 2, -1, -2, 2, -1, 2, 0, 0, 0, -1, -1, 0, 1, 2, -2, 2, -1, -2, 2, -2, 2, 0, 2, -2, 2, 1, -2, 0, 0, 1, 2, -1, 0, 2, 0, -1, 1, 2, 0, -1, -1, 0, 1, 2, 0, -1, -1, 0, 1, 0, -1, -1, -1, 2, 1, -2, -1, -1, -1, -2, 2, 1, 2, -1, -1, 0, -2, 0, -2, 0, -2, 0, 2, 0, 2, -2, 2, -1, -1, 2, 2, -2, 2, 0, -2, 1, 1, -2, -1, 2, 0, -1, -2, 2, 2, 0, 2, -2, 1, 1, 2, 2, -2, 1, -2, 2, 0, -2, 0, -2, 2, 2, -1, 2, 0, 0, -1, 1, 2, -1, -1, 2, -1, 1, 2, 1, 2, 2, 2, 2, 1, 1, -2, 1, 2, -2, -2, 0, -1, -1, -1, 1, -1, 0, 1, -1, -1, 0, -1, -1, 0, 0, -1, -2, -2, 2, -1, -1, 1, -2, 2, 0, 2, 2, -2, -2, 1, 0, 2, -1, 2, -1, 2, 1, 2, 1, -2, 1, 1, 2, -1, -2, -2, 1, -2, -1, -2, -2, 0, 0, 0, -1, -1, -1, 1, -1, -1, -2, 0, -1, -2, 0],
# [0, -2, -1, -2, 1, 2, 1, 2, 0, -2, 1, 2, 1, -2, -1, -2, 0, -2, 1, 0, 0, 0, -1, 2, 0, -1, 0, -2, -2, -1, 1, 2, 0, 1, -1, 1, 2, 0, 1, -1, 0, 0, 1, -2, 1, -1, -1, -1, 1, 0, 1, -1, 1, 1, 2, 1, 2, -1, 1, 2, 0, 2, -2, 2, 0, 1, 1, 1, -1, -1, -1, -1, -2, 0, -2, 1, 1, -1, 2, 2, 1, -1, -1, -1, 0, 2, -1, 0, -2, 1, -2, -2, -2, 0, 1, 2, 0, 0, 1, 2, -2, 0, -2, -1, 0, 2, 1, -1, 0, 2, 2, -1, -2, 0, -1, 0, 0, 1, -1, 2, -1, -1, -1, 0, 2, 1, -1, 0, -2, 1, -1, -1, -1, -1, 2, 1, -2, -1, 1, -1, -1, 0, -2, -1, -2, 1, 2, 2, 0, 0, 2, -2, 1, -1, 1, -1, 2, 2, -1, 2, -2, -1, 0, -2, 1, 1, 0, -1, 1, 1, 1, 2, 2, 1, 2, -2, -1, 2, -1, -1, 0, 0, 0, 0, -1, 0, -2, -2, 2, -1, -1, 0, 0, -1, 2, 1, -2, -1, 2, -1, 0, 0, -2, -1, -2, 1, -2, -1, 2, 0, -2, -1, -2, -1, -2, 1, -1, 0, 2, 2, 1, 0, -1, -2, 0, 1, 1, -2, 2, 0, 0, 1, -1, 2, 2, -1, -1, -1, -2, 0, 2, 0, 1, 0, -1, 1, -2, -2, 2, -2, 1, 1, -1, -2, 2, -1],
# [1, 2, 1, 1, 1, -1, -2, 0, 2, 1, -1, 2, -1, 1, 0, -2, 2, 1, -1, -2, -1, 0, -1, -2, 2, -1, -1, -1, -1, 2, -1, 1, 0, 1, 1, 1, 1, 2, -1, -1, 0, -2, 1, 2, -1, 0, 1, 1, 2, -1, 0, -2, 0, 1, 0, 2, 0, 1, 0, -2, -2, 0, 0, -2, -2, -1, 0, 0, 1, 1, -2, -2, -2, 2, -2, 2, 2, -2, 1, 2, 0, 0, 0, -2, -1, 2, 2, 0, -1, -1, -2, 0, 1, 2, 1, -1, 0, -2, -1, 2, 0, -1, -1, 1, 2, 1, -1, 0, 1, 1, -2, -2, 1, 2, 1, 1, 2, 1, 2, -1, -2, -2, 2, 1, 0, 1, -2, -1, -1, 0, 0, 2, 0, -2, 1, 2, 1, 0, 2, 2, 1, 0, 1, 2, 2, 1, -1, 1, 0, 2, 0, 0, 1, 1, -1, -2, 1, 1, -1, -2, 2, 2, 0, 0, 2, 0, 2, 1, -2, -1, 0, -2, 1, -1, 0, -2, 0, -1, -2, 2, 1, 1, 1, 0, 0, 2, 1, 1, 0, -1, -2, 2, 0, 0, 2, 1, -2, -2, 0, -1, -1, 2, 2, -2, -1, 0, 0, -1, -2, 0, 0, 0, 0, -2, -2, 0, 0, 1, 0, 2, 1, 0, -2, -1, -2, 0, 2, 0, 0, 1, 1, 1, -2, 1, -1, 2, 0, 0, 0, -1, -1, 0, -2, 1, 1, -1, -1, 1, -2, 1, 0, -2, 2, 2, 2, 1]]
# t0 = [[1578, -404, -697, 1175, 2062, -2688, -1377, -816, -789, 1906, 345, 1407, 467, -665, -2820, 3878, -2013, -413, -675, -103, -1522, -3652, -3464, -690, -2309, 3874, -956, 2047, -2746, -834, -663, 4084, 3105, 2529, -2923, 1566, -1659, -4001, -3443, 2826, 3937, 2058, -3893, 261, -1354, 203, -557, -470, 1037, 2337, 845, -2916, -2558, 2273, -2314, 202, 3744, -2165, 3989, -2458, -2119, -896, 3068, 1135, 3317, -3882, -57, 2870, 3301, -3595, 2451, -2787, 2208, -580, -2237, -3690, 553, -209, -2513, -1681, -2890, -3607, 2815, 1854, 633, -521, 2961, -1581, -3959, 1418, -2666, -347, -3162, 3552, 2722, -3882, -1060, 1671, 903, 3519, -137, 1066, -2021, 831, -427, 836, 660, -1394, 2495, 437, 1171, -3941, -4031, 3163, 3302, 3661, 3293, -1108, 1720, 3692, -3254, 3788, -1388, 3647, -1936, 179, -2772, -2947, 1536, -2659, 1636, 1141, -3093, 1299, 3362, 1889, 339, 3588, 1022, -1681, -1273, -123, -1868, -875, 3314, -1853, -1312, 927, 703, 3000, -3606, 1734, 1062, -1632, 3989, -3160, 3456, 4073, 1542, -3849, 3006, -550, 3762, 946, 3363, 453, 2954, -2401, -2677, -1626, -1839, 2263, 1275, -2757, 1474, -2701, -1177, -1196, -554, -326, -18, -1114, 892, -1444, -1920, -4036, 712, -820, 2248, 3452, 1425, -3494, -3287, -646, -1383, -1390, -3881, -2027, 1513, 356, -26, 1914, 3388, 1991, 3422, 2697, 3589, 1080, 829, 690, -1150, -3528, -2084, 2414, -745, -3143, -3288, 762, -3628, -2193, -3605, -2557, 2119, -3668, -3388, 3185, -769, 1604, -3279, 2174, 2497, 2406, 1275, -403, -1209, -666, 2803, -2036, -1958, 1054, -94, 783, 2877, 1015, 2399, 3961, 3973, 754, -3310, -340, 2643, 3918, -2471, 2220, -4019, -2174],
# [441, 1662, 424, 3669, 104, -2116, -3204, 1216, 2814, -1935, -962, -3429, -3680, -8, 1769, 2405, 2469, -3357, 330, 1151, 2380, -3509, 3340, -1408, 487, 877, -2049, -2596, -2101, 1518, 1376, 767, -1520, -1693, -1802, -3596, -3442, -1730, -722, 3825, -1146, 2694, 1884, -2741, -3642, -4011, 1972, 3656, 1347, 3092, 1809, -2010, 1395, -228, -3548, -2360, 285, -213, 2753, 2426, -3732, -4085, -1399, 2591, -3914, 2793, 2170, -2282, 469, 2351, -1536, 310, -329, 2436, -1137, -166, -3550, -2828, -3596, -3392, 176, -2289, -2663, -3417, -4090, -2753, 2809, -2879, -1024, 877, -3414, -2031, 2769, -2518, 2395, 1472, 4049, 3999, 1134, -1669, -3511, 3250, -1697, 1044, -599, 2062, 3361, 1424, -3318, -3772, 630, -330, -2502, -102, -896, 31, -3638, -2257, -1679, -1103, 2161, 2545, 629, -861, 4048, -2878, 3333, 2801, 3236, 1018, -3278, 3326, 775, -852, 2764, 2621, 554, -2988, 2527, 1166, 3040, 3504, 2941, -633, -682, 3658, 3432, -1264, -279, -1291, 3763, -645, 4090, -1776, -1323, -3727, 1485, -370, 2789, -1371, -2658, -724, -485, 2901, -2000, 1130, 1325, 3579, 3646, 314, 2377, 1059, -660, 41, 1719, -3996, -1599, -1869, -2963, 3896, -2752, -3842, 3332, -3476, -3548, 1061, 812, -710, -2723, 1692, -466, 462, -3170, 3516, -220, -3850, -3891, -1977, -3347, 1289, 3423, 2671, 2638, 2990, 164, -1304, -3775, -3819, 3477, 2318, -1289, 3081, 379, -3647, -1842, -130, -895, -1864, 1235, -1725, 2868, -3106, -3307, 842, -2773, 900, -1710, -2897, 3787, 2348, 1520, -2612, -3153, -3014, 2340, 343, 2739, 172, -2594, -253, -3123, 2416, -2017, 2670, 2283, -1077, 2779, 3821, -27, -3704, -2868, -1367, 3253, -567, 87, 2796],
# [-197, 144, -3112, -3470, 1, -3201, -1176, -3003, 2727, 1682, -3187, 2647, -708, 1308, 3737, 2326, 4077, -2508, -3615, 3899, 1482, 3316, -1004, 2383, -523, -2368, 2009, -943, 1848, 2850, 164, -2538, 465, 3041, -1238, 3895, 2845, 3635, 2264, -954, 240, -2126, 2170, 783, 2814, -3541, -2104, -3062, 581, -1048, -3919, 2245, -125, 3822, 4027, 1267, -2176, 346, 2394, 347, -2288, 347, -205, -656, 2561, -2130, -2153, -2006, -2989, -2722, -2401, 605, -983, -3692, 2051, -1879, 2816, 669, -1846, -2388, -615, -150, 3507, 3543, -2927, 699, -3442, 921, 61, 3088, -3635, -3015, 2588, 2350, -448, -958, -1898, -3064, 3551, 1469, -3515, -3001, -2136, 1751, 190, -2378, 3260, -2299, -1661, 1835, 1134, -3125, -855, -3247, -721, 2774, -2800, -350, 1290, -2638, -1529, 1830, 189, 1406, -1501, 3076, -1533, -3755, 1964, 2047, -2612, -552, -3488, -420, -55, 3927, 1357, -828, -2787, -187, 921, 3717, -3760, -735, -3269, 2603, 1790, 3462, -902, -2669, -1595, 1769, -84, -1743, -2910, -3133, -3833, 3879, -1030, -237, -53, -3867, 340, -3881, 3726, -1889, 1441, -1882, -921, 1474, -451, 1933, -864, -1423, -3482, -1855, 1241, 1590, 1970, 1353, 393, -3148, -1150, -3198, 2552, 269, -543, -2638, -1398, -2197, 11, 2935, 3301, 22, 3146, -2193, 2911, 542, -1997, 2161, -1394, 3409, -28, 52, -4014, -2547, 3655, -1789, -2205, -3693, -3692, 1811, 3779, -1187, -3733, 3368, -3444, -643, 3527, -2694, -397, 419, 688, -577, 942, -3226, -3918, 2787, 536, -2655, 2582, 875, 50, 1953, -45, -1118, -1736, -1966, -675, -3323, -1491, 2858, 2825, -415, -1026, -1944, 1975, 1630, -1078, 3441, 3669, -778, 461, 906, 2330, 101],
# [60, 4067, -2508, -615, -1970, -1491, -2776, -1175, -3908, -2722, 1869, 3008, 1669, -3684, -2305, -3718, 2776, 1940, -1385, -1043, -1351, 2950, 3226, -1146, -3475, -1421, 744, -1698, -727, -1320, -1508, -685, -474, -2696, -3791, -3827, 201, 2816, 868, 2523, 2424, 3253, 3889, -3480, -4039, -1754, -1663, 3080, -1068, -2834, 3079, 3030, 2831, -3660, 2712, 933, 1154, -2614, -3058, -403, 3685, -587, 233, 3745, -2444, 2632, 1977, -2009, 3473, 822, -2079, 344, 1393, -2040, -423, 4021, -3615, 0, 1784, 3055, 7, -3649, 65, 725, 4011, 1046, -2042, -3777, 134, 3692, 3309, -1989, -978, 3819, 580, 2580, -1844, 2539, 261, -2908, -3360, 2855, 676, 2068, -1943, -2331, -1023, 2978, -543, -1156, 3927, -2060, -3248, -785, -3234, 2272, 658, -3706, 23, -2766, -335, -548, -517, -557, 341, -1500, 3125, 944, 3969, 3309, 1181, 4041, -2038, 355, -2070, 3632, 2488, -2453, 706, 1190, -1541, -1167, -1460, -744, -2307, -3540, -2891, -3101, -3863, -2159, -3270, -602, -673, 76, 287, -1161, -2152, 196, -2116, -221, -2782, -960, 3802, -1061, 2728, 1252, 231, -2291, 1304, -2766, -3624, -3539, 3965, 1083, 1566, -4030, -1369, 806, -1915, 3499, 978, -1324, -519, -1538, 3134, 682, -3608, -2627, 294, -2422, -2701, -653, -282, -3431, 3094, 451, -880, -659, 641, 3407, -3497, 2131, -1182, 2406, -1943, -1265, -1809, 3287, -2840, -2791, 2780, 1266, 3412, 1400, 988, -2987, -607, -1171, -610, 2068, -339, -3248, -2280, -3546, -3157, 1371, 3987, -3304, -3767, 2811, -3117, 3848, 690, -3303, 3781, 3646, -3204, 1481, -1257, -2272, -1240, 562, 3215, 3693, -3088, 2675, 1221, -3513, 3306, 1011, 997, 2412, -1225, -1316, -2812, -3485]]
# # 執行編碼
# encoded_sk = sk_encode(p, K_1, tr, s1, s2, t0)
# decoded_components = sk_decode(encoded_sk)
# decoded_p, decoded_K, decoded_tr, decoded_s1, decoded_s2, decoded_t0 = decoded_components
# # # 比較結果
# print("Decoded matches original:")
# print(s1[0])
# print(decoded_s1[0])
# print(s2[0])
# print(decoded_s2[0])
# print(t0[0])
# print(decoded_t0[0])
# print("Decoded s1 matches original s1:", compare_arrays(s1, decoded_s1))
# print("Decoded s2 matches original s2:", compare_arrays(s2, decoded_s2))
# print("Decoded t0 matches original t0:", compare_arrays(t0, decoded_t0))
# print("Encoded secret key length:", len(encoded_sk))
# print("p:", np.array_equal(p, decoded_p))
# print("K:", np.array_equal(K_1, decoded_K))
# print("tr:", np.array_equal(tr, decoded_tr))

# # 算法 20 sigEncode(c˜,z,h) && 算法 21 sigDecode(σ)  test-----------------------------------------
# c = [1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1]
# z = [[-42047, -66894, 87908, 89595, 111780, 18060, -29472, 106675, -73405, 83736, -61194, -65178, -122794, 28095, -24402, 110453, -15, -102450, -203, -19281, -49095, -33680, -74126, 95449, -87968, -61315, -118543, -82701, 34428, 11441, -110480, -118455, 14714, -45236, 66412, 78762, 66285, 10681, -52485, 53728, -52769, -54004, 45997, -32316, 33149, -119738, -81161, 77372, -21283, -51701, -123967, 57369, -33580, -116554, -88796, -44404, 101159, -67115, -94965, -80543, -25581, -4804, 39318, -22466, 58924, -928, -25075, 26450, -77249, -7498, 25346, -77505, 71306, -87348, 26858, 108801, 62131, 75391, -9824, -44105, -37352, 124925, -96476, -113891, -124942, -56942, 105644, 1133, -130683, 29391, 27558, -23588, 93408, 129553, 59378, 45567, 5651, 16046, -104697, -45556, -58027, 107758, -67908, 36669, 38897, -32270, -108957, 23108, -112968, 61829, 83304, 70544, 26322, -86308, 20039, 35152, 46379, 127736, 59258, 82535, 121489, -64378, -23753, -26437, -28839, -33660, 118142, -71023, 130971, 119047, -92207, -127060, -29904, 37356, -99722, 32685, 31103, -45703, -38630, 52341, -101736, -52657, 4441, 106496, -102173, -78787, 45682, 32341, 128900, 70797, 28084, 12562, 80215, 3111, -116752, 55819, -47980, 73072, -43535, 68883, 125878, -72195, -28545, 96546, 105366, 77077, 6899, -70953, -101568, -121601, -95049, -18303, 17833, 94140, -96390, -118464, 126786, 52007, 67313, -98242, -33725, 124144, -6857, -15542, 13895, -58750, 27243, 18499, 15442, -102404, -119068, 56751, -5064, 120196, 74412, -123821, 73148, 83165, -57798, -42195, 117005, 46480, 75996, -47119, 22946, -28138, -63937, -31541, -114208, -116817, -97284, 111741, -93530, -25378, -38851, -24402, 124057, 129231, 79670, 71593, 44050, 90117, -101733, -67465, 115321, -31516, -91818, 71022, -6095, 102687, 34816, -11237, 61117, 30947, 29634, -70339, -72288, 15731, -67884, -76294, -22759, 19962, 127229, 65801, -119313, -74665, -26091, -13884, -79129, -20183, -88404, 75298, 48448, -28156, -20715, -25954],
# [123647, -70330, -93442, 60681, -86285, -51894, 49194, -44950, 57114, -17199, -58463, -71488, 4364, 53766, -64258, -25477, 59878, 47821, 109235, -86650, 19807, 83711, -26549, 43999, -30343, -128998, 91090, 4286, -51721, -29551, -21963, -7319, 16713, 35419, 81811, -43030, 63040, -46899, 62633, 55499, 37178, 26947, 110936, 36392, 71866, -78035, -27406, 6848, -26233, 33687, -101810, 69583, -31824, -101067, 45388, 93652, -95030, 92162, 42899, -80077, 91686, 89970, -529, -5226, -61317, -98845, 23514, -42498, -58266, -84614, 125866, 78167, 66925, 88004, -84793, -12597, 56716, -127054, -14248, 92182, 4465, -89280, -29766, -60949, -156, -109985, 21749, 69755, 106754, -37271, 116622, -71027, 126349, -48070, 119662, 48432, 108198, 43571, -99647, -93139, -13077, 54164, 115276, 75174, 81053, -75387, 117007, -91446, 42041, -96520, 0, 18031, 117710, 53158, -1277, -55749, 107501, -83881, -130330, 75471, 56833, 116815, -86394, 47123, 92267, -97909, -81325, -88114, -45885, -74719, -101, -77748, 119601, -71265, -6357, 115833, -120994, 87499, 46214, -123247, 129204, -101985, -127170, 49379, 100152, 15265, -22568, 128541, -16862, -18314, 119543, 6392, 88518, 35195, 14710, 63115, -129619, 81225, 61226, -92480, 10072, -103413, -93700, 100317, 113831, 58989, -80534, 4008, -75361, 99893, -116458, 105488, 91457, -19249, -3156, -19431, -11663, 116678, -8018, -64535, 98780, 62319, -123503, -106924, 71252, 18890, -6578, 80520, 119432, -3826, 53168, -89645, -853, -112368, -39174, 63905, 57135, -1381, -70809, 55848, 1379, 83793, -64022, -108705, -119071, 60896, -120709, -16698, -121453, 6141, 103821, -51308, 36724, -93836, 12764, -51088, 51465, 100564, 85269, 43297, 9311, -17716, -19094, 106544, -81464, 97662, -103038, -8992, -96132, 67394, 122012, 114345, 85184, 126660, -33531, -87888, 78909, 11118, 24104, -4503, -14384, 71008, 98835, 61605, 65426, 82782, -93774, -55179, 40193, 36509, -56486, 10722, 74815, -127881, -130807, 46284],
# [57016, 59853, 117938, 25787, 49505, 116013, -108741, -48313, 71670, 29923, -97360, 116408, 79617, -129957, -42369, 78665, 25762, -8610, -119751, 75461, -55687, -59417, 20957, -41525, -87800, 67817, -103402, -107479, 45244, 9854, 56417, 55083, 42088, 53096, 68310, 40484, 57486, 1606, -93862, 58724, -39417, 116627, 100743, 38571, -72758, 72278, 99744, -49750, -118373, 83477, -124406, -78624, 108327, -10151, -57348, -61610, -90532, -86748, -24398, -100873, -3970, 120956, 40188, -108171, 82329, 88371, 20262, -96023, 69884, 48736, -78307, -44650, -24084, 26685, 93041, 129935, -46954, 46670, 18546, -4806, 128806, -32137, 25863, -88569, -86690, 38223, 82066, 105468, -85239, 55664, 48817, 85651, 91886, -103735, 103418, -9623, -28845, -112368, 33960, -80780, 96988, -97392, -26979, -49767, -50119, 26581, -12695, -103933, 54669, -112332, -21597, -21153, 95673, 2112, -88254, -98663, 17431, -50329, -86469, -34758, 56926, -78386, -122795, 59228, -43590, 63385, -7903, 40438, -130176, 51091, -84858, 96105, -75332, 5723, 297, 8994, -117752, -96674, -47633, -2756, -5315, 71709, -39258, 113329, 80960, -72285, -17512, -129052, 73320, 115038, 34549, -25637, 101611, 16501, -89553, -32320, -10897, 34672, 127236, 111260, -63645, 42133, -77736, 78226, 115049, -80528, -46480, 24552, -90457, 34938, -64660, -23693, 61444, -48173, 68889, 9082, -11516, 71517, 32962, 31019, 93576, 25492, -17263, -82465, 55302, -92415, 92559, -61021, -110825, -20744, -32485, -126871, 103584, -5392, 115212, 8056, 43733, 67723, 19368, -121174, -7684, -111896, -17127, -26850, -10538, -78140, 81281, -44739, 63591, 29915, -22409, 41935, 17984, 83006, 90022, -116895, 126116, 38657, -18222, -115219, 70409, 123099, 13987, 98239, 14593, -55420, 107102, -14770, -3668, -36954, 87586, -73232, -56553, -38232, -53051, 111372, -76122, 49113, -13379, -100109, -3020, 67825, -98460, 58429, -12989, -18022, 99457, -8713, 83705, -65494, -63451, -89109, 49797, -4685, -40180, 34682],
# [-40359, -101301, 17776, -86009, -1052729, 96534, -108073, -94116, -86484, -119434, 80204, -39970, -122636, 107842, 51703, 11226, 129241, -4976, 60575, 103323, 116452, -112025, 117670, -98512, -128447, -57227, -30273, 43804, 102907, 11419, 16316, -120504, 97005, -100348, 90976, -64973, -87594, -63039, -105834, 22807, -71299, -57222, -86410, 37335, 54058, -55896, 99789, 72557, -24415, 55435, 119255, -116505, -64372, -129481, 98117, -97900, -129682, 102144, -15980, -32549, -8750, -69288, 64629, -113344, -103862, -116622, -10234, 31716, -65636, 41357, -62222, 73598, 82829, -46960, -46685, -108329, -126459, -2086, 100593, 128574, -112604, 82137, 58195, 17254, -63688, -94138, -72699, 127011, -122414, -122685, -110003, 108330, -17690, 95248, 64383, 54872, -111315, 97153, 95709, -126533, 6189, -114535, 114446, -79825, 674, -33239, -55899, 111045, 129372, 104513, -840, -44009, 37351, -48787, -35658, -7130, -40613, -89461, -32387, -117630, 82041, 20535, 36611, 54621, 123069, 117216, -83492, 6057, -1867, -44548, 117895, 114911, 84544, -93878, -42152, 113227, -66108, -21863, -81063, -30763, -101189, 80261, 91504, 79402, -52023, -25713, 115264, 96955, 74243, 40380, -83058, -118907, -100570, -71484, -89450, -30823, 101479, 128742, 86316, 115031, 126824, -65051, -90886, 80467, 41531, -9128, -113674, -49567, -79817, 11777, 66350, 41082, -59894, 74533, 18191, -21452, 86297, -66986, 9230, -15699, -83519, -29388, -104910, -19563, 11164, -102322, 123562, 25186, 86515, -85365, -120088, -82545, -112073, -56445, 60674, -124514, 97507, -46671, -11442, -71955, 28792, -73189, -84171, 109866, -105704, -47040, 78031, 43186, 38334, 50360, 16662, -17951, 58444, -36524, 19796, 74343, 91975, -18135, -121537, 126656, 100431, -14062, 52157, -82591, -15447, 66256, -71586, 84811, -82511, -69812, -4409, -17959, 706, 69357, -100395, 56442, -116851, -57214, 1917, -13441, 16982, 122436, -61910, 33886, 77310, 90259, -87434, 44202, -109762, 88193, -27681, -74792, 41363, -773, -27177, 111736]]
# h = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
# # 編碼
# print(len(c))
# print(len(z[0]))
# print(len(h))
# encoded_sig = sigEncode(c, z, h)
# print("Encoded signature length:", len(encoded_sig))
# # # 解碼
# decoded_c, decoded_z, decoded_h = sigDecode(encoded_sig)
# print("Decoded c:", decoded_c)
# print("Decoded z:", decoded_z)
# print("Decoded h:", decoded_h)


# 算法 23 SampleInBall(ρ) test-----------------------------------------
# seed = bytes([1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0])  # Seed must be bytes
# # print(len(seed))
# # t = 50  # Number of non-zero coefficients
# polynomial = sample_in_ball(seed)
# print("Sampled polynomial:", polynomial)
# print(len(polynomial))
# p = [1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0]
# p = bytes(p)
# # print(p)
# a = shake256(p , 512)
# print(len(a))
# print(a)
# print(a[0])


# # 算法 24 RejNTTPoly(ρ)  test-----------------------------------------
# seed = b'your_seed_here'  # Seed must be bytes
# polynomial = RejNTTPoly(seed)
# print("Generated polynomial coefficients:", polynomial)


# 算法 25 RejBoundedPoly(ρ)  test-----------------------------------------
# seed = b"your_seed_here"  # Seed must be bytes
# modulus_n = 6  # Example modulus
# eta = 4  # Example eta value for coefficient calculation
# polynomial = RejBoundedPoly(seed)
# print("Generated polynomial coefficients:", polynomial)


# 算法 26 ExpandA(ρ)  test-----------------------------------------
# # Example usage
# seed = [1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0] # Seed must be bytes
# k = 3  # Dimension k of the matrix
# l = 3  # Dimension l of the matrix
# matrix_A = ExpandA(seed)
# print("Generated matrix A:", matrix_A)
# print(matrix_A.shape)

# 算法 27 ExpandS(ρ)  test-----------------------------------------
# seed = [1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0] # Seed must be bytes
# s1, s2 = ExpandS(seed)
# print("Generated vectors s1:", s1)
# print("Generated vectors s2:", s2)

# 算法 28 ExpandMask(ρ, µ)
# seed = [1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0]  # Seed must be bytes
# mu = 5  # Example nonnegative integer
# vector_s = ExpandMask(seed, mu)
# print("Generated vector of polynomials:", vector_s)


#NTT & inv_NTT test---------------------------------
# original_poly = np.random.randint(0, ML_DSA["q"], 256)  # Random coefficients

# print(original_poly)
# # Perform NTT
# transformed_poly = NTT(original_poly)

# # Perform inverse NTT
# recovered_poly = NTT_inv(transformed_poly)

# print(recovered_poly)
# # Check if original and recovered polynomials are the same
# if np.array_equal(original_poly, recovered_poly):
#     print("Test Passed: The recovered polynomial matches the original.")
# else:
#     print("Test Failed: The recovered polynomial does not match the original.")


# # 算法 29: Power2Round(r)   test---------------------------
# input_29 = 66666666
# print(Power2Round(input_29))

# # 算法 30: Decompose(r)     test--------------------------- aswer => (42, 4259)
# input_30 = 66666666
# print(Decompose(input_30))

# # 算法 31: HighBits(r)      test--------------------------- aswer => 42
# input_31 = 66666666 
# print(HighBits(input_31))

# # 算法 32: LowBits(r)       test--------------------------- aswer => 4259
# input_32 = 66666666 
# print(LowBits(input_32))

# # 算法 33: MakeHint(z, r)   test--------------------------- aswer => False
# input_33_1 = 1
# input_33_2 = 66666666 
# print(MakeHint(input_33_1,input_33_2))

# # 算法 34: UseHint(h, r)    test--------------------------- aswer => 42
# input_34_1 = 0
# input_34_2 = 66666666 
# print(UseHint(input_34_1,input_34_2))


# 算法 1 ML-DSA.KeyGen() testing--------------------------------
# a = KeyGen()

# 算法 2 ML-DSA.Sign() testing--------------------------------
sk = [0,1,0,1,1,0,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,     

0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,     

1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,     

0,0,1,1,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,     

0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,     

0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,     

0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,     

0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,     

1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,1,     

0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,1,     

1,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,0,     

0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,     

0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,     

0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,     

0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,     

0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,     

1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,0,     

1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,     

1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,     

0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,0,     

0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,     

0,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,     

0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,     

0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,     

1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,     

0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,     

1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,     

0,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,     

0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,1,1,0,0,0,0,     

1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,     

1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,     

1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,     

1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,     

0,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,     

0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,     

1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,     

0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,     

0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,1,     

0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,     

0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,     

1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,1,1,1,0,0,1,0,     

1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,     

1,0,0,1,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,     

0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,     

1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,     

0,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,     

0,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,     

1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,     

1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,     

0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,1,0,     

0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,0,1,     

1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,     

0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,     

0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,     

0,0,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,     

0,0,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0,     

0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,0,     

1,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,1,     

0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,0,     

1,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,     

0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,     

0,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,     

0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,     

0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,     

0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,     

0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,     

1,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,0,     

0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,     

1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,1,1,     

1,0,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,     

0,1,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,     

0,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,1,     

0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,     

1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,     

0,0,1,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,0,0,1,     

0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,     

1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,     

0,1,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,     

0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,     

1,1,1,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,     

0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,     

1,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,     

0,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,     

1,1,0,1,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,     

1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,     

0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,0,0,

0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,1,     

1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,1,0,0,0,     

1,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,1,0,     

1,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,     

0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,     

1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,0,0,     

1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,     

0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,     

0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,     

0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,     

0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,     

1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,1,     

1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,     

0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,1,1,0,0,1,     

1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,     

0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,     

0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,     

1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,1,     

1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,0,1,     

1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,     

1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,     

1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,     

0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,     

0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,     

1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,     

0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,     

1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,     

1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,     

1,1,1,0,0,1,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,     

0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,     

0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,     

1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,1,1,1,0,0,1,     

1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,     

1,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,     

1,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,0,     

1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,     

1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,0,     

1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,     

0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,1,0,1,0,1,     

0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,     

0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,     

1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,0,     

0,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,     

0,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,     

1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,     

0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,1,     

0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,     

0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0,     

0,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,     

0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,0,0,     

0,1,0,0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,0,     

0,0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,     

1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,     

0,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,     

1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,     

1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,1,0,0,

0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,     

1,0,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,1,1,     

0,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,     

0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,     

0,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,0,0,     

1,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,     

1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,1,     

1,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,     

1,1,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,     

0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,1,1,1,0,1,     

1,0,1,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,0,     

0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,1,0,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,     

0,1,0,1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,0,1,0,0,1,0,1,0,     

1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,     

0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,     

0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,     

0,1,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,     

1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,     

0,0,0,1,0,1,1,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,     

1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,0,1,     

1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,     

1,1,0,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0,1,0,0,     

0,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,     

0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,     

1,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,     

1,1,0,0,1,1,0,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,     

1,0,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,     

1,0,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,     

1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,     

1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,     

1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,1,     

0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,     

0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,     

1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,1,     

1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,0,     

0,1,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,0,     

1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,     

0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,1,     

1,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,1,     

0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,     

1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,1,1,     

0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,     

0,0,1,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,     

0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,     

1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,     

1,0,0,0,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,0,1,0,0,0,     

1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,     

0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,1,0,     

1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,     

1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,1,1,1,0,     

0,1,0,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,     

0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,1,0,     

0,1,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,     

1,1,0,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,     

0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,1,0,1,1,1,1,0,0,1,0,0,     

1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0,     

1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,1,     

0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,0,1,

1,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,     

0,0,0,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,1,0,     

1,1,1,1,0,1,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,     

1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,1,0,0,0,0,0,1,1,1,     

1,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0]








M = [1,1,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,     

1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,     

1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,1,     

1,1,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,     

0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,0,     

1,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,     

0,0,0,0,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,     

1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,     

0,1,0,0,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,     

0,1,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,     

1,1,1,1,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,     

1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,     

0,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,1,     

0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,     

0,1,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,     

1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,1,1,0,     

0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,     

1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,1,0,1,     

1,0,0,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,     

0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,     

0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,     

1,1,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,1,     

0,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,1,1,     

1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,     

0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,0,1,     

1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,     

0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,     

0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,     

0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,     

0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,0,1,1,1,     

0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,     

1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,     

1,1,1,0,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,     

0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,1,     

0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,     

1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,0,1,0,1,     

1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,     

1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,     

1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,1,     

1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,1,1,1,     

0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,     

0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,0,0,     

0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,     

1,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,0,1,     

1,0,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,     

1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,     

0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,0,     

0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,     

1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,     

0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,1,     

1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,     

1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,     

1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,     

0,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,     

0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,     

0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,     

1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,0,     

0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,1,0,     

0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,     

1,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,1,     

0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,     

0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,0,     

1,0,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,     

0,0,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,0,1,     

1,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,     

1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,     

0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,     

0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,     

1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,     

0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,     

1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,     

0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,0,1,     

0,1,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,1,0,1,1,0,0,0,1,0,     

1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,1,0,1,     

0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,1,     

1,0,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,1,0,1,     

0,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,0,     

1,0,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,     

0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,1,     

1,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,0,     

0,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,     

1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,     

0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,0,0,1,     

0,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,     

0,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,     

0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,0,     

0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,     

1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,     

1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,0,     

1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,1,1,0,1,1,0,     

0,0,1,1,0,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1,     

1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,0,     

0,1,0,0,1,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,     

0,0,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,     

0,0,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0,     

0,1,0,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,1,1,     

1,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,0,     

0,0,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,     

1,1,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,     

0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,     

1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,0,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,     

0,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,     

1,0,0,0,0,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,1,     

1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,0,1,     

0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,1,1,0,1,1,1,1,0,0,1,     

0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,     

0,1,0,0,0,0,1,1,1,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,     

1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,1,     

0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,0,1,     

0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,     

0,0,1,1,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,     

0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,1,1,1,1,     

0,0,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,     

1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,0,1,0,1,     

0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,1,0,1,1,     

0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,     

0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,     

1,0,0,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,     

0,1,1,0,0,0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,     

1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,1,1,1,     

1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,     

1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,     

0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,0,1,0,     

0,0,0,1,0,0,1,0,1,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,1,1,1,0,1,0,1,0,1,1,0,     

0,0,1,1,1,1,0,1,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,     

1,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,1,     

0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,     

0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,     

1,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,     

1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,1,1,0,0,0,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,     

0,0,0,1,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,     

1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0,1,     

1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,     

0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,1,1,     

1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,1,     

0,1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,     

1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,     

0,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,     

1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,     

1,0,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,1,1,0,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,0,

0,1,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,0,0,1,     

1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,     

1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,     

0,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,1,0,     

0,1,0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,     

0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,0,1,1,1,0,     

1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,0,     

1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,1,     

0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,1,     

1,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,     

0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,     

0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,     

1,0,1,1,1,0,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,     

0,0,0,1,1,0,1,1,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,1,     

0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,     

1,1,1,1,0,1,1,0,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,0,     

1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,     

0,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,     

0,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,     

0,0,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,1,1,0,0,0,     

1,0,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,     

0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,     

0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,     

0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,     

1,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,1,0,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,0,0,     

0,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,0,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,     

1,0,0,1,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,     

1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,     

1,1,0,0,0,0,0,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,     

0,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,0,0,1,0,1,0,     

0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1,0,0,     

1,1,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,1,0,1,     

1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,1,0,1,0,1,1,     

0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,1,     

0,0,1,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,     

1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,     

1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,     

1,0,1,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,1,0,     

1,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,1,     

0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,1,     

0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,0,1,0,     

1,0,0,0,1,0,1,0,1,0,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0]

a = Sign(sk,M)



































































# # 創建shake_256散列對象
# shake = hashlib.shake_256()

# # 添加數據
# shake.update(b"Example data for hashing")

# # 獲取128位的散列值（指定為16字節）
# digest = shake.digest(16)
# print("Digest:", digest)

# # 獲取十六進制格式的散列值
# hex_digest = shake.hexdigest(16)
# print("Hex Digest:", hex_digest)

# ML_DSA = ML_DSA_44

# print(ML_DSA["d"])


# def Key_Gen():
#     zeta = os.urandom(32)

#     seed_bytes = self._h(zeta, 128)
#     print(zeta)

# Key_Gen()


# Shake256 = Shake(shake_256, 136)A